<style>
    table.head, table.foot { width: 100%; }
    td.head-rtitle, td.foot-os { text-align: right; }
    td.head-vol { text-align: center; }
    div.Pp { margin: 1ex 0ex; }
    div.Nd, div.Bf, div.Op { display: inline; }
    span.Pa, span.Ad { font-style: italic; }
    span.Ms { font-weight: bold; }
    dl.Bl-diag > dt { font-weight: bold; }
    code.Nm, code.Fl, code.Cm, code.Ic, code.In, code.Fd, code.Fn,
    code.Cd { font-weight: bold; font-family: monospace; }
    var { font-family: monospace; }
    .Sh { font-size: 1.5em; padding-top: 1em; padding-bottom: 1em; }
</style>
<table class="head">
  <tr>
    <td class="head-ltitle">FIDO_BIO_TEMPLATE(3)</td>
    <td class="head-vol">Library Functions Manual</td>
    <td class="head-rtitle">FIDO_BIO_TEMPLATE(3)</td>
  </tr>
</table>
<div class="manual-text">
<h1 class="Sh" title="Sh" id="NAME"><a class="permalink" href="#NAME">NAME</a></h1>
<code class="Nm" title="Nm">fido_bio_template</code>,
  <code class="Nm" title="Nm">fido_bio_template_array_count</code>,
  <code class="Nm" title="Nm">fido_bio_template_array_free</code>,
  <code class="Nm" title="Nm">fido_bio_template_array_new</code>,
  <code class="Nm" title="Nm">fido_bio_template_free</code>,
  <code class="Nm" title="Nm">fido_bio_template_id_len</code>,
  <code class="Nm" title="Nm">fido_bio_template_id_ptr</code>,
  <code class="Nm" title="Nm">fido_bio_template_name</code>,
  <code class="Nm" title="Nm">fido_bio_template_new</code>,
  <code class="Nm" title="Nm">fido_bio_template_set_id</code>,
  <code class="Nm" title="Nm">fido_bio_template_set_name</code> &#x2014;
<div class="Nd" title="Nd">FIDO 2 biometric template API</div>
<h1 class="Sh" title="Sh" id="SYNOPSIS"><a class="permalink" href="#SYNOPSIS">SYNOPSIS</a></h1>
<code class="In" title="In">#include
  &lt;<a class="In" title="In">fido.h</a>&gt;</code>
<br/>
<code class="In" title="In">#include
  &lt;<a class="In" title="In">fido/bio.h</a>&gt;</code>
<div class="Pp"></div>
<var class="Ft" title="Ft">fido_bio_template_t *</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_new</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">void</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">void</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_free</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">fido_bio_template_t
  **template_p</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const char *</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_name</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_bio_template_t *template</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_id_ptr</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_bio_template_t *template</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_id_len</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_bio_template_t *template</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">int</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_set_id</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">fido_bio_template_t
  *template</var>, <var class="Fa" title="Fa" style="white-space: nowrap;">const
  unsigned char *ptr</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t len</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">int</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_set_name</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">fido_bio_template_t
  *template</var>, <var class="Fa" title="Fa" style="white-space: nowrap;">const
  char *name</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">fido_bio_template_array_t *</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_array_new</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">void</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">void</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_array_free</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">fido_bio_template_array_t
  **array_p</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template_array_count</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_bio_template_array_t *array</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const fido_bio_template_t *</var>
<br/>
<code class="Fn" title="Fn">fido_bio_template</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_bio_template_array_t *array</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<h1 class="Sh" title="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h1>
Existing FIDO 2 biometric enrollments are abstracted in
  <i class="Em" title="Em">libfido2</i> by the
  <var class="Vt" title="Vt">fido_bio_template_t</var> and
  <var class="Vt" title="Vt">fido_bio_template_array_t</var> types.
<div class="Pp"></div>
The functions described in this page allow a
  <var class="Vt" title="Vt">fido_bio_template_t</var> type to be allocated,
  deallocated, changed, and inspected, and a
  <var class="Vt" title="Vt">fido_bio_template_array_t</var> type to be
  allocated, deallocated, and inspected. For device operations on
  <var class="Vt" title="Vt">fido_bio_template_t</var> and
  <var class="Vt" title="Vt">fido_bio_template_array_t</var>, please refer to
  <a class="Xr" title="Xr" href="fido_bio_dev_get_info.html">fido_bio_dev_get_info(3)</a>.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template_new</code>() function returns
  a pointer to a newly allocated, empty
  <var class="Vt" title="Vt">fido_bio_template_t</var> type. If memory cannot be
  allocated, NULL is returned.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template_free</code>() function
  releases the memory backing <var class="Fa" title="Fa">*template_p</var>,
  where <var class="Fa" title="Fa">*template_p</var> must have been previously
  allocated by <code class="Fn" title="Fn">fido_bio_template_new</code>(). On
  return, <var class="Fa" title="Fa">*template_p</var> is set to NULL. Either
  <var class="Fa" title="Fa">template_p</var> or
  <var class="Fa" title="Fa">*template_p</var> may be NULL, in which case
  <code class="Fn" title="Fn">fido_bio_template_free</code>() is a NOP.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template_name</code>() function returns
  a pointer to a NUL-terminated string containing the friendly name of
  <var class="Fa" title="Fa">template</var>, or NULL if
  <var class="Fa" title="Fa">template</var> does not have a friendly name set.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template_id_ptr</code>() function
  returns a pointer to the template id of
  <var class="Fa" title="Fa">template</var>, or NULL if
  <var class="Fa" title="Fa">template</var> does not have an id. The
  corresponding length can be obtained by
  <code class="Fn" title="Fn">fido_bio_template_id_len</code>().
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template_set_name</code>() function
  sets the friendly name of <var class="Fa" title="Fa">template</var> to
  <var class="Fa" title="Fa">name</var>. If
  <var class="Fa" title="Fa">name</var> is NULL, the friendly name of
  <var class="Fa" title="Fa">template</var> is unset.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template_array_new</code>() function
  returns a pointer to a newly allocated, empty
  <var class="Vt" title="Vt">fido_bio_template_array_t</var> type. If memory
  cannot be allocated, NULL is returned.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template_array_free</code>() function
  releases the memory backing <var class="Fa" title="Fa">*array_p</var>, where
  <var class="Fa" title="Fa">*array_p</var> must have been previously allocated
  by <code class="Fn" title="Fn">fido_bio_template_array_new</code>(). On
  return, <var class="Fa" title="Fa">*array_p</var> is set to NULL. Either
  <var class="Fa" title="Fa">array_p</var> or
  <var class="Fa" title="Fa">*array_p</var> may be NULL, in which case
  <code class="Fn" title="Fn">fido_bio_template_array_free</code>() is a NOP.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template_array_count</code>() function
  returns the number of templates in <var class="Fa" title="Fa">array</var>.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_bio_template</code>() function returns a
  pointer to the template at index <var class="Fa" title="Fa">idx</var> in
  <var class="Fa" title="Fa">array</var>. Please note that the first template in
  <var class="Fa" title="Fa">array</var> has an
  <var class="Fa" title="Fa">idx</var> (index) value of 0.
<h1 class="Sh" title="Sh" id="RETURN_VALUES"><a class="permalink" href="#RETURN_VALUES">RETURN
  VALUES</a></h1>
The error codes returned by
  <code class="Fn" title="Fn">fido_bio_template_set_id</code>() and
  <code class="Fn" title="Fn">fido_bio_template_set_name</code>() are defined in
  <code class="In" title="In">&lt;<a class="In" title="In">fido/err.h</a>&gt;</code>.
  On success, <code class="Dv" title="Dv">FIDO_OK</code> is returned.
<h1 class="Sh" title="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE
  ALSO</a></h1>
<a class="Xr" title="Xr" href="fido_bio_dev_get_info.html">fido_bio_dev_get_info(3)</a>,
  <a class="Xr" title="Xr" href="fido_bio_enroll_new.html">fido_bio_enroll_new(3)</a></div>
<table class="foot">
  <tr>
    <td class="foot-date">September 13, 2019</td>
    <td class="foot-os">Linux 5.3.12-arch1-1</td>
  </tr>
</table>
