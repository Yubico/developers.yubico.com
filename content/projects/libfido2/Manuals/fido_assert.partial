<table class="head">
  <tr>
    <td class="head-ltitle">FIDO_ASSERT(3)</td>
    <td class="head-vol">Library Functions Manual</td>
    <td class="head-rtitle">FIDO_ASSERT(3)</td>
  </tr>
</table>
<div class="manual-text">
<h1 class="Sh" title="Sh" id="NAME"><a class="selflink" href="#NAME">NAME</a></h1>
<b class="Nm" title="Nm">fido_assert_new</b>,
  <b class="Nm" title="Nm">fido_assert_free</b>,
  <b class="Nm" title="Nm">fido_assert_count</b>,
  <b class="Nm" title="Nm">fido_assert_user_display_name</b>,
  <b class="Nm" title="Nm">fido_assert_user_icon</b>,
  <b class="Nm" title="Nm">fido_assert_user_name</b>,
  <b class="Nm" title="Nm">fido_assert_authdata_ptr</b>,
  <b class="Nm" title="Nm">fido_assert_clientdata_hash_ptr</b>,
  <b class="Nm" title="Nm">fido_assert_user_id_ptr</b>,
  <b class="Nm" title="Nm">fido_assert_sig_ptr</b>,
  <b class="Nm" title="Nm">fido_assert_authdata_len</b>,
  <b class="Nm" title="Nm">fido_assert_clientdata_hash_len</b>,
  <b class="Nm" title="Nm">fido_assert_user_id_len</b>,
  <b class="Nm" title="Nm">fido_assert_sig_len</b> &#x2014;
  <span class="Nd" title="Nd">FIDO 2 assertion API</span>
<h1 class="Sh" title="Sh" id="SYNOPSIS"><a class="selflink" href="#SYNOPSIS">SYNOPSIS</a></h1>
<b class="In" title="In">#include
  &lt;<a class="In" title="In">fido.h</a>&gt;</b>
<div class="Pp"></div>
<var class="Ft" title="Ft">fido_assert_t *</var>
<br/>
<b class="Fn" title="Fn">fido_assert_new</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">void</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">void</var>
<br/>
<b class="Fn" title="Fn">fido_assert_free</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">fido_assert_t
  **assert_p</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<b class="Fn" title="Fn">fido_assert_count</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const char *</var>
<br/>
<b class="Fn" title="Fn">fido_assert_user_display_name</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const char *</var>
<br/>
<b class="Fn" title="Fn">fido_assert_user_icon</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const char *</var>
<br/>
<b class="Fn" title="Fn">fido_assert_user_name</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<b class="Fn" title="Fn">fido_assert_authdata_ptr</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<b class="Fn" title="Fn">fido_assert_clientdata_hash_ptr</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<b class="Fn" title="Fn">fido_assert_user_id_ptr</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<b class="Fn" title="Fn">fido_assert_sig_ptr</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<b class="Fn" title="Fn">fido_assert_authdata_len</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<b class="Fn" title="Fn">fido_assert_clientdata_hash_len</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<b class="Fn" title="Fn">fido_assert_user_id_len</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<b class="Fn" title="Fn">fido_assert_sig_len</b>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<h1 class="Sh" title="Sh" id="DESCRIPTION"><a class="selflink" href="#DESCRIPTION">DESCRIPTION</a></h1>
FIDO 2 assertions are abstracted in <i class="Em" title="Em">libfido2</i> by the
  <var class="Vt" title="Vt">fido_assert_t</var> type. The functions described
  in this page allow a <var class="Vt" title="Vt">fido_assert_t</var> type to be
  allocated, deallocated, and inspected. For other operations on
  <var class="Vt" title="Vt">fido_assert_t</var>, please refer to
  <a class="Xr" title="Xr" href="fido_assert_set.html">fido_assert_set(3)</a>,
  <a class="Xr" title="Xr" href="fido_assert_allow_cred.html">fido_assert_allow_cred(3)</a>,
  <a class="Xr" title="Xr" href="fido_assert_verify.html">fido_assert_verify(3)</a>,
  and
  <a class="Xr" title="Xr" href="fido_dev_get_assert.html">fido_dev_get_assert(3)</a>.
<div class="Pp"></div>
The <b class="Fn" title="Fn">fido_assert_new</b>() function returns a pointer to
  a newly allocated, empty <var class="Vt" title="Vt">fido_assert_t</var> type.
  If memory cannot be allocated, NULL is returned.
<div class="Pp"></div>
The <b class="Fn" title="Fn">fido_assert_free</b>() function releases the memory
  backing <var class="Fa" title="Fa">*assert_p</var>, where
  <var class="Fa" title="Fa">*assert_p</var> must have been previously allocated
  by <b class="Fn" title="Fn">fido_assert_new</b>(). On return,
  <var class="Fa" title="Fa">*assert_p</var> is set to NULL. Either
  <var class="Fa" title="Fa">assert_p</var> or
  <var class="Fa" title="Fa">*assert_p</var> may be NULL, in which case
  <b class="Fn" title="Fn">fido_assert_free</b>() is a NOP.
<div class="Pp"></div>
The <b class="Fn" title="Fn">fido_assert_count</b>() function returns the number
  of statements in <var class="Fa" title="Fa">assert</var>.
<div class="Pp"></div>
The <b class="Fn" title="Fn">fido_assert_user_display_name</b>(),
  <b class="Fn" title="Fn">fido_assert_user_icon</b>(), and
  <b class="Fn" title="Fn">fido_assert_user_name</b>(), functions return
  pointers to the user display name, icon, and name attributes of statement
  <var class="Fa" title="Fa">idx</var> in
  <var class="Fa" title="Fa">assert</var>. If not NULL, the values returned by
  these functions point to NUL-terminated UTF-8 strings. Please note that the
  first statement in <var class="Fa" title="Fa">assert</var> has an
  <var class="Fa" title="Fa">idx</var> (index) value of 0.
<div class="Pp"></div>
The <b class="Fn" title="Fn">fido_assert_user_id_ptr</b>(),
  <b class="Fn" title="Fn">fido_assert_authdata_ptr</b>(), and
  <b class="Fn" title="Fn">fido_assert_sig_ptr</b>() functions return pointers
  to the user ID, authenticator data, and signature attributes of statement
  <var class="Fa" title="Fa">idx</var> in
  <var class="Fa" title="Fa">assert</var>. The
  <b class="Fn" title="Fn">fido_assert_user_id_len</b>(),
  <b class="Fn" title="Fn">fido_assert_authdata_len</b>() and
  <b class="Fn" title="Fn">fido_assert_sig_len</b>() functions can be used to
  retrieve the corresponding length of a specific attribute. Please note that
  the first statement in <var class="Fa" title="Fa">assert</var> has an
  <var class="Fa" title="Fa">idx</var> (index) value of 0.
<div class="Pp"></div>
The authenticator data and signature parts of an assertion statement are
  typically passed to a FIDO 2 server for verification.
<div class="Pp"></div>
The <b class="Fn" title="Fn">fido_assert_clientdata_hash_ptr</b>() function
  returns a pointer to the client data hash of
  <var class="Fa" title="Fa">assert</var>. The corresponding length can be
  obtained by <b class="Fn" title="Fn">fido_assert_clientdata_hash_len</b>().
<h1 class="Sh" title="Sh" id="RETURN_VALUES"><a class="selflink" href="#RETURN_VALUES">RETURN
  VALUES</a></h1>
The <b class="Fn" title="Fn">fido_assert_user_display_name</b>(),
  <b class="Fn" title="Fn">fido_assert_user_icon</b>(),
  <b class="Fn" title="Fn">fido_assert_user_name</b>(),
  <b class="Fn" title="Fn">fido_assert_authdata_ptr</b>(),
  <b class="Fn" title="Fn">fido_assert_clientdata_hash_ptr</b>(),
  <b class="Fn" title="Fn">fido_assert_user_id_ptr</b>(), and
  <b class="Fn" title="Fn">fido_assert_sig_ptr</b>() functions return NULL if
  the respective field in <var class="Fa" title="Fa">assert</var> is not set. If
  not NULL, returned pointers are guaranteed to exist until any API function
  that takes <var class="Fa" title="Fa">assert</var> without the
  <i class="Em" title="Em">const</i> qualifier is invoked.
<h1 class="Sh" title="Sh" id="SEE_ALSO"><a class="selflink" href="#SEE_ALSO">SEE
  ALSO</a></h1>
<a class="Xr" title="Xr" href="fido_assert_allow_cred.html">fido_assert_allow_cred(3)</a>,
  <a class="Xr" title="Xr" href="fido_assert_set.html">fido_assert_set(3)</a>,
  <a class="Xr" title="Xr" href="fido_assert_verify.html">fido_assert_verify(3)</a>,
  <a class="Xr" title="Xr" href="fido_dev_get_assert.html">fido_dev_get_assert(3)</a></div>
<table class="foot">
  <tr>
    <td class="foot-date">May 24, 2018</td>
    <td class="foot-os">Linux 4.16.11-1-ARCH</td>
  </tr>
</table>
