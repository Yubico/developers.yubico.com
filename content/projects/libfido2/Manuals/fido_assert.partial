<style>
    table.head, table.foot { width: 100%; }
    td.head-rtitle, td.foot-os { text-align: right; }
    td.head-vol { text-align: center; }
    div.Pp { margin: 1ex 0ex; }
    div.Nd, div.Bf, div.Op { display: inline; }
    span.Pa, span.Ad { font-style: italic; }
    span.Ms { font-weight: bold; }
    dl.Bl-diag > dt { font-weight: bold; }
    code.Nm, code.Fl, code.Cm, code.Ic, code.In, code.Fd, code.Fn,
    code.Cd { font-weight: bold; font-family: monospace; }
    var { font-family: monospace; }
    .Sh { font-size: 1.5em; padding-top: 1em; padding-bottom: 1em; }
</style>
<table class="head">
  <tr>
    <td class="head-ltitle">FIDO_ASSERT(3)</td>
    <td class="head-vol">Library Functions Manual</td>
    <td class="head-rtitle">FIDO_ASSERT(3)</td>
  </tr>
</table>
<div class="manual-text">
<h1 class="Sh" title="Sh" id="NAME"><a class="permalink" href="#NAME">NAME</a></h1>
<code class="Nm" title="Nm">fido_assert_new</code>,
  <code class="Nm" title="Nm">fido_assert_free</code>,
  <code class="Nm" title="Nm">fido_assert_count</code>,
  <code class="Nm" title="Nm">fido_assert_user_display_name</code>,
  <code class="Nm" title="Nm">fido_assert_user_icon</code>,
  <code class="Nm" title="Nm">fido_assert_user_name</code>,
  <code class="Nm" title="Nm">fido_assert_authdata_ptr</code>,
  <code class="Nm" title="Nm">fido_assert_clientdata_hash_ptr</code>,
  <code class="Nm" title="Nm">fido_assert_hmac_secret_ptr</code>,
  <code class="Nm" title="Nm">fido_assert_user_id_ptr</code>,
  <code class="Nm" title="Nm">fido_assert_sig_ptr</code>,
  <code class="Nm" title="Nm">fido_assert_authdata_len</code>,
  <code class="Nm" title="Nm">fido_assert_clientdata_hash_len</code>,
  <code class="Nm" title="Nm">fido_assert_hmac_secret_len</code>,
  <code class="Nm" title="Nm">fido_assert_user_id_len</code>,
  <code class="Nm" title="Nm">fido_assert_sig_len</code> &#x2014;
<div class="Nd" title="Nd">FIDO 2 assertion API</div>
<h1 class="Sh" title="Sh" id="SYNOPSIS"><a class="permalink" href="#SYNOPSIS">SYNOPSIS</a></h1>
<code class="In" title="In">#include
  &lt;<a class="In" title="In">fido.h</a>&gt;</code>
<div class="Pp"></div>
<var class="Ft" title="Ft">fido_assert_t *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_new</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">void</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">void</var>
<br/>
<code class="Fn" title="Fn">fido_assert_free</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">fido_assert_t
  **assert_p</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<code class="Fn" title="Fn">fido_assert_count</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const char *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_user_display_name</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const char *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_user_icon</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const char *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_user_name</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_authdata_ptr</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_clientdata_hash_ptr</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_hmac_secret_ptr</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_user_id_ptr</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">const unsigned char *</var>
<br/>
<code class="Fn" title="Fn">fido_assert_sig_ptr</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<code class="Fn" title="Fn">fido_assert_authdata_len</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<code class="Fn" title="Fn">fido_assert_clientdata_hash_len</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<code class="Fn" title="Fn">fido_assert_hmac_secret_len</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<code class="Fn" title="Fn">fido_assert_user_id_len</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<div class="Pp"></div>
<var class="Ft" title="Ft">size_t</var>
<br/>
<code class="Fn" title="Fn">fido_assert_sig_len</code>(<var class="Fa" title="Fa" style="white-space: nowrap;">const
  fido_assert_t *assert</var>,
  <var class="Fa" title="Fa" style="white-space: nowrap;">size_t idx</var>);
<h1 class="Sh" title="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h1>
FIDO 2 assertions are abstracted in <i class="Em" title="Em">libfido2</i> by the
  <var class="Vt" title="Vt">fido_assert_t</var> type. The functions described
  in this page allow a <var class="Vt" title="Vt">fido_assert_t</var> type to be
  allocated, deallocated, and inspected. For other operations on
  <var class="Vt" title="Vt">fido_assert_t</var>, please refer to
  <a class="Xr" title="Xr" href="fido_assert_set.html">fido_assert_set(3)</a>,
  <a class="Xr" title="Xr" href="fido_assert_allow_cred.html">fido_assert_allow_cred(3)</a>,
  <a class="Xr" title="Xr" href="fido_assert_verify.html">fido_assert_verify(3)</a>,
  and
  <a class="Xr" title="Xr" href="fido_dev_get_assert.html">fido_dev_get_assert(3)</a>.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_assert_new</code>() function returns a
  pointer to a newly allocated, empty
  <var class="Vt" title="Vt">fido_assert_t</var> type. If memory cannot be
  allocated, NULL is returned.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_assert_free</code>() function releases the
  memory backing <var class="Fa" title="Fa">*assert_p</var>, where
  <var class="Fa" title="Fa">*assert_p</var> must have been previously allocated
  by <code class="Fn" title="Fn">fido_assert_new</code>(). On return,
  <var class="Fa" title="Fa">*assert_p</var> is set to NULL. Either
  <var class="Fa" title="Fa">assert_p</var> or
  <var class="Fa" title="Fa">*assert_p</var> may be NULL, in which case
  <code class="Fn" title="Fn">fido_assert_free</code>() is a NOP.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_assert_count</code>() function returns the
  number of statements in <var class="Fa" title="Fa">assert</var>.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_assert_user_display_name</code>(),
  <code class="Fn" title="Fn">fido_assert_user_icon</code>(), and
  <code class="Fn" title="Fn">fido_assert_user_name</code>(), functions return
  pointers to the user display name, icon, and name attributes of statement
  <var class="Fa" title="Fa">idx</var> in
  <var class="Fa" title="Fa">assert</var>. If not NULL, the values returned by
  these functions point to NUL-terminated UTF-8 strings. Please note that the
  first statement in <var class="Fa" title="Fa">assert</var> has an
  <var class="Fa" title="Fa">idx</var> (index) value of 0.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_assert_user_id_ptr</code>(),
  <code class="Fn" title="Fn">fido_assert_authdata_ptr</code>(),
  <code class="Fn" title="Fn">fido_assert_hmac_secret_ptr</code>(), and
  <code class="Fn" title="Fn">fido_assert_sig_ptr</code>() functions return
  pointers to the user ID, authenticator data, hmac-secret, and signature
  attributes of statement <var class="Fa" title="Fa">idx</var> in
  <var class="Fa" title="Fa">assert</var>. The
  <code class="Fn" title="Fn">fido_assert_user_id_len</code>(),
  <code class="Fn" title="Fn">fido_assert_authdata_len</code>(),
  <code class="Fn" title="Fn">fido_assert_hmac_secret_len</code>(), and
  <code class="Fn" title="Fn">fido_assert_sig_len</code>() functions can be used
  to retrieve the corresponding length of a specific attribute. Please note that
  the first statement in <var class="Fa" title="Fa">assert</var> has an
  <var class="Fa" title="Fa">idx</var> (index) value of 0.
<div class="Pp"></div>
The authenticator data and signature parts of an assertion statement are
  typically passed to a FIDO 2 server for verification.
<div class="Pp"></div>
The <code class="Fn" title="Fn">fido_assert_clientdata_hash_ptr</code>()
  function returns a pointer to the client data hash of
  <var class="Fa" title="Fa">assert</var>. The corresponding length can be
  obtained by
  <code class="Fn" title="Fn">fido_assert_clientdata_hash_len</code>().
<h1 class="Sh" title="Sh" id="RETURN_VALUES"><a class="permalink" href="#RETURN_VALUES">RETURN
  VALUES</a></h1>
The <code class="Fn" title="Fn">fido_assert_user_display_name</code>(),
  <code class="Fn" title="Fn">fido_assert_user_icon</code>(),
  <code class="Fn" title="Fn">fido_assert_user_name</code>(),
  <code class="Fn" title="Fn">fido_assert_authdata_ptr</code>(),
  <code class="Fn" title="Fn">fido_assert_clientdata_hash_ptr</code>(),
  <code class="Fn" title="Fn">fido_assert_user_id_ptr</code>(), and
  <code class="Fn" title="Fn">fido_assert_sig_ptr</code>() functions return NULL
  if the respective field in <var class="Fa" title="Fa">assert</var> is not set.
  If not NULL, returned pointers are guaranteed to exist until any API function
  that takes <var class="Fa" title="Fa">assert</var> without the
  <i class="Em" title="Em">const</i> qualifier is invoked.
<h1 class="Sh" title="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE
  ALSO</a></h1>
<a class="Xr" title="Xr" href="fido_assert_allow_cred.html">fido_assert_allow_cred(3)</a>,
  <a class="Xr" title="Xr" href="fido_assert_set.html">fido_assert_set(3)</a>,
  <a class="Xr" title="Xr" href="fido_assert_verify.html">fido_assert_verify(3)</a>,
  <a class="Xr" title="Xr" href="fido_dev_get_assert.html">fido_dev_get_assert(3)</a></div>
<table class="foot">
  <tr>
    <td class="foot-date">May 24, 2018</td>
    <td class="foot-os">Linux 5.2.1-arch1-1-ARCH</td>
  </tr>
</table>
