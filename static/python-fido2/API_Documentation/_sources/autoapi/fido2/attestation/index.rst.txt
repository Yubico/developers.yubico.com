fido2.attestation
=================

.. py:module:: fido2.attestation


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/fido2/attestation/android/index
   /autoapi/fido2/attestation/apple/index
   /autoapi/fido2/attestation/base/index
   /autoapi/fido2/attestation/packed/index
   /autoapi/fido2/attestation/tpm/index
   /autoapi/fido2/attestation/u2f/index


Exceptions
----------

.. autoapisummary::

   fido2.attestation.InvalidData
   fido2.attestation.InvalidSignature
   fido2.attestation.UnsupportedType
   fido2.attestation.UntrustedAttestation


Classes
-------

.. autoapisummary::

   fido2.attestation.AndroidSafetynetAttestation
   fido2.attestation.AppleAttestation
   fido2.attestation.Attestation
   fido2.attestation.AttestationResult
   fido2.attestation.AttestationType
   fido2.attestation.AttestationVerifier
   fido2.attestation.NoneAttestation
   fido2.attestation.UnsupportedAttestation
   fido2.attestation.PackedAttestation
   fido2.attestation.TpmAttestation
   fido2.attestation.FidoU2FAttestation


Functions
---------

.. autoapisummary::

   fido2.attestation.verify_x509_chain


Package Contents
----------------

.. py:class:: AndroidSafetynetAttestation(allow_rooted = False)

   Bases: :py:obj:`fido2.attestation.base.Attestation`


   Implements verification of a specific attestation type.


   .. py:attribute:: FORMAT
      :value: 'android-safetynet'



   .. py:attribute:: allow_rooted
      :value: False



   .. py:method:: verify(statement, auth_data, client_data_hash)

      Verifies attestation statement.

      :return: An AttestationResult if successful.



.. py:class:: AppleAttestation

   Bases: :py:obj:`fido2.attestation.base.Attestation`


   Implements verification of a specific attestation type.


   .. py:attribute:: FORMAT
      :value: 'apple'



   .. py:method:: verify(statement, auth_data, client_data_hash)

      Verifies attestation statement.

      :return: An AttestationResult if successful.



.. py:class:: Attestation

   Bases: :py:obj:`abc.ABC`


   Implements verification of a specific attestation type.


   .. py:method:: verify(statement, auth_data, client_data_hash)
      :abstractmethod:


      Verifies attestation statement.

      :return: An AttestationResult if successful.



   .. py:method:: for_type(fmt)
      :staticmethod:


      Get an Attestation subclass type for the given format.



.. py:class:: AttestationResult

   The result of verifying an attestation.


   .. py:attribute:: attestation_type
      :type:  AttestationType


   .. py:attribute:: trust_path
      :type:  list[bytes]


.. py:class:: AttestationType

   Bases: :py:obj:`enum.IntEnum`


   Supported attestation types.


   .. py:attribute:: BASIC
      :value: 1



   .. py:attribute:: SELF
      :value: 2



   .. py:attribute:: ATT_CA
      :value: 3



   .. py:attribute:: ANON_CA
      :value: 4



   .. py:attribute:: NONE
      :value: 0



.. py:class:: AttestationVerifier(attestation_types = None)

   Bases: :py:obj:`abc.ABC`


   Base class for verifying attestation.

   Override the ca_lookup method to provide a trusted root certificate used
   to verify the trust path from the attestation.


   .. py:method:: ca_lookup(attestation_result, auth_data)
      :abstractmethod:


      Lookup a CA certificate to be used to verify a trust path.

      :param attestation_result: The result of the attestation
      :param auth_data: The AuthenticatorData from the registration



   .. py:method:: verify_attestation(attestation_object, client_data_hash)

      Verify attestation.

      :param attestation_object: dict containing attestation data.
      :param client_data_hash: SHA256 hash of the ClientData bytes.



.. py:exception:: InvalidData

   Bases: :py:obj:`InvalidAttestation`


   Attestation contains invalid data.


.. py:exception:: InvalidSignature

   Bases: :py:obj:`InvalidAttestation`


   The signature of the attestation could not be verified.


.. py:class:: NoneAttestation

   Bases: :py:obj:`Attestation`


   Implements verification of a specific attestation type.


   .. py:attribute:: FORMAT
      :value: 'none'



   .. py:method:: verify(statement, auth_data, client_data_hash)

      Verifies attestation statement.

      :return: An AttestationResult if successful.



.. py:class:: UnsupportedAttestation(fmt=None)

   Bases: :py:obj:`Attestation`


   Implements verification of a specific attestation type.


   .. py:attribute:: fmt
      :value: None



   .. py:method:: verify(statement, auth_data, client_data_hash)

      Verifies attestation statement.

      :return: An AttestationResult if successful.



.. py:exception:: UnsupportedType(auth_data, fmt=None)

   Bases: :py:obj:`InvalidAttestation`


   The attestation format is not supported.


   .. py:attribute:: auth_data


   .. py:attribute:: fmt
      :value: None



.. py:exception:: UntrustedAttestation

   Bases: :py:obj:`InvalidAttestation`


   The CA of the attestation is not trusted.


.. py:function:: verify_x509_chain(chain)

   Verifies a chain of certificates.

   Checks that the first item in the chain is signed by the next, and so on.
   The first item is the leaf, the last is the root.


.. py:class:: PackedAttestation

   Bases: :py:obj:`fido2.attestation.base.Attestation`


   Implements verification of a specific attestation type.


   .. py:attribute:: FORMAT
      :value: 'packed'



   .. py:method:: verify(statement, auth_data, client_data_hash)

      Verifies attestation statement.

      :return: An AttestationResult if successful.



.. py:class:: TpmAttestation

   Bases: :py:obj:`fido2.attestation.base.Attestation`


   Implements verification of a specific attestation type.


   .. py:attribute:: FORMAT
      :value: 'tpm'



   .. py:method:: verify(statement, auth_data, client_data_hash)

      Verifies attestation statement.

      :return: An AttestationResult if successful.



.. py:class:: FidoU2FAttestation

   Bases: :py:obj:`fido2.attestation.base.Attestation`


   Implements verification of a specific attestation type.


   .. py:attribute:: FORMAT
      :value: 'fido-u2f'



   .. py:method:: verify(statement, auth_data, client_data_hash)

      Verifies attestation statement.

      :return: An AttestationResult if successful.



   .. py:method:: verify_signature(app_param, client_param, key_handle, public_key, cert_bytes, signature)
      :staticmethod:



