fido2.ctap2.extensions
======================

.. py:module:: fido2.ctap2.extensions


Classes
-------

.. autoapisummary::

   fido2.ctap2.extensions.ExtensionProcessor
   fido2.ctap2.extensions.RegistrationExtensionProcessor
   fido2.ctap2.extensions.AuthenticationExtensionProcessor
   fido2.ctap2.extensions.Ctap2Extension
   fido2.ctap2.extensions.HMACGetSecretInput
   fido2.ctap2.extensions.HMACGetSecretOutput
   fido2.ctap2.extensions.AuthenticatorExtensionsPRFValues
   fido2.ctap2.extensions.AuthenticatorExtensionsPRFInputs
   fido2.ctap2.extensions.AuthenticatorExtensionsPRFOutputs
   fido2.ctap2.extensions.HmacSecretExtension
   fido2.ctap2.extensions.AuthenticatorExtensionsLargeBlobInputs
   fido2.ctap2.extensions.AuthenticatorExtensionsLargeBlobOutputs
   fido2.ctap2.extensions.LargeBlobExtension
   fido2.ctap2.extensions.CredBlobExtension
   fido2.ctap2.extensions.CredProtectExtension
   fido2.ctap2.extensions.MinPinLengthExtension
   fido2.ctap2.extensions.CredentialPropertiesOutput
   fido2.ctap2.extensions.CredPropsExtension
   fido2.ctap2.extensions.PaymentCurrencyAmount
   fido2.ctap2.extensions.PaymentCredentialInstrument
   fido2.ctap2.extensions.AuthenticationExtensionsPaymentInputs
   fido2.ctap2.extensions.ThirdPartyPaymentExtension


Module Contents
---------------

.. py:class:: ExtensionProcessor(permissions = ClientPin.PERMISSION(0), inputs = None, outputs = None)

   Bases: :py:obj:`abc.ABC`


   Base class for CTAP2 extension processing.

   See: :class:`RegistrationExtensionProcessor` and
   :class:`AuthenticationExtensionProcessor`.


   .. py:attribute:: permissions


.. py:class:: RegistrationExtensionProcessor(permissions = ClientPin.PERMISSION(0), inputs = None, outputs = None)

   Bases: :py:obj:`ExtensionProcessor`


   Processing state for a CTAP2 extension, for single use.

   The ExtensionProcessor holds state and logic for client processing of an extension,
   for a registration (MakeCredential) call.

   :param permissions: PinUvAuthToken permissions required by the extension.
   :param inputs: Default authenticator inputs, if prepare_inputs is not overridden.
   :param outputs: Default client outputs, if prepare_outputs is not overridden.


   .. py:method:: prepare_inputs(pin_token)

      Prepare authenticator extension inputs, to be passed to the Authenenticator.



   .. py:method:: prepare_outputs(response, pin_token)

      Prepare client extension outputs, to be returned to the caller.



.. py:class:: AuthenticationExtensionProcessor(permissions = ClientPin.PERMISSION(0), inputs = None, outputs = None)

   Bases: :py:obj:`ExtensionProcessor`


   Processing state for a CTAP2 extension, for single use.

   The ExtensionProcessor holds state and logic for client processing of an extension,
   for an authentication (GetAssertion) call.

   :param permissions: PinUvAuthToken permissions required by the extension.
   :param inputs: Default authenticator inputs, if prepare_inputs is not overridden.
   :param outputs: Default client outputs, if prepare_outputs is not overridden.


   .. py:method:: prepare_inputs(selected, pin_token)

      Prepare authenticator extension inputs, to be passed to the Authenenticator.



   .. py:method:: prepare_outputs(response, pin_token)

      Prepare client extension outputs, to be returned to the caller.



.. py:class:: Ctap2Extension

   Bases: :py:obj:`abc.ABC`


   Base class for CTAP2 extensions.

   As of python-fido2 1.2 these instances can be used for multiple requests and
   should be invoked via the make_credential and get_assertion methods.
   Subclasses are instantiated for a single request, if the Authenticator supports
   the extension.


   .. py:method:: is_supported(ctap)
      :abstractmethod:


      Whether or not the extension is supported by the authenticator.



   .. py:method:: make_credential(ctap, options, pin_protocol)

      Start client extension processing for registration.



   .. py:method:: get_assertion(ctap, options, pin_protocol)

      Start client extension processing for authentication.



.. py:class:: HMACGetSecretInput

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Client inputs for hmac-secret.


   .. py:attribute:: salt1
      :type:  bytes


   .. py:attribute:: salt2
      :type:  bytes | None
      :value: None



.. py:class:: HMACGetSecretOutput

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Client outputs for hmac-secret.


   .. py:attribute:: output1
      :type:  bytes


   .. py:attribute:: output2
      :type:  bytes | None
      :value: None



.. py:class:: AuthenticatorExtensionsPRFValues

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Salt values for use with prf.


   .. py:attribute:: first
      :type:  bytes


   .. py:attribute:: second
      :type:  bytes | None
      :value: None



.. py:class:: AuthenticatorExtensionsPRFInputs

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Client inputs for prf.


   .. py:attribute:: eval
      :type:  AuthenticatorExtensionsPRFValues | None
      :value: None



   .. py:attribute:: eval_by_credential
      :type:  Mapping[str, AuthenticatorExtensionsPRFValues] | None
      :value: None



.. py:class:: AuthenticatorExtensionsPRFOutputs

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Client outputs for prf.


   .. py:attribute:: enabled
      :type:  bool | None
      :value: None



   .. py:attribute:: results
      :type:  AuthenticatorExtensionsPRFValues | None
      :value: None



.. py:class:: HmacSecretExtension(allow_hmac_secret=False)

   Bases: :py:obj:`Ctap2Extension`


   Implements the Pseudo-random function (prf) and the hmac-secret CTAP2 extensions.

   The hmac-secret extension is not directly available to clients by default, instead
   the prf extension is used.

   https://www.w3.org/TR/webauthn-3/#prf-extension

   https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-hmac-secret-extension

   :param allow_hmac_secret: Set to True to allow hmac-secret, in addition to prf.


   .. py:attribute:: NAME
      :value: 'hmac-secret'



   .. py:attribute:: MC_NAME
      :value: 'hmac-secret-mc'



   .. py:attribute:: SALT_LEN
      :value: 32



   .. py:method:: is_supported(ctap)

      Whether or not the extension is supported by the authenticator.



   .. py:method:: make_credential(ctap, options, pin_protocol)

      Start client extension processing for registration.



   .. py:method:: get_assertion(ctap, options, pin_protocol)

      Start client extension processing for authentication.



.. py:class:: AuthenticatorExtensionsLargeBlobInputs

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Client inputs for largeBlob.


   .. py:attribute:: support
      :type:  str | None
      :value: None



   .. py:attribute:: read
      :type:  bool | None
      :value: None



   .. py:attribute:: write
      :type:  bytes | None
      :value: None



.. py:class:: AuthenticatorExtensionsLargeBlobOutputs

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Client outputs for largeBlob.


   .. py:attribute:: supported
      :type:  bool | None
      :value: None



   .. py:attribute:: blob
      :type:  bytes | None
      :value: None



   .. py:attribute:: written
      :type:  bool | None
      :value: None



.. py:class:: LargeBlobExtension

   Bases: :py:obj:`Ctap2Extension`


   Implements the Large Blob storage (largeBlob) WebAuthn extension.

   https://www.w3.org/TR/webauthn-3/#sctn-large-blob-extension


   .. py:attribute:: NAME
      :value: 'largeBlobKey'



   .. py:method:: is_supported(ctap)

      Whether or not the extension is supported by the authenticator.



   .. py:method:: make_credential(ctap, options, pin_protocol)

      Start client extension processing for registration.



   .. py:method:: get_assertion(ctap, options, pin_protocol)

      Start client extension processing for authentication.



.. py:class:: CredBlobExtension

   Bases: :py:obj:`Ctap2Extension`


   Implements the Credential Blob (credBlob) CTAP2 extension.

   https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credBlob-extension


   .. py:attribute:: NAME
      :value: 'credBlob'



   .. py:method:: is_supported(ctap)

      Whether or not the extension is supported by the authenticator.



   .. py:method:: make_credential(ctap, options, pin_protocol)

      Start client extension processing for registration.



   .. py:method:: get_assertion(ctap, options, pin_protocol)

      Start client extension processing for authentication.



.. py:class:: CredProtectExtension

   Bases: :py:obj:`Ctap2Extension`


   Implements the Credential Protection CTAP2 extension.

   https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credProtect-extension


   .. py:class:: POLICY(*args, **kwds)

      Bases: :py:obj:`enum.Enum`


      Create a collection of name/value pairs.

      Example enumeration:

      >>> class Color(Enum):
      ...     RED = 1
      ...     BLUE = 2
      ...     GREEN = 3

      Access them by:

      - attribute access:

        >>> Color.RED
        <Color.RED: 1>

      - value lookup:

        >>> Color(1)
        <Color.RED: 1>

      - name lookup:

        >>> Color['RED']
        <Color.RED: 1>

      Enumerations can be iterated over, and know how many members they have:

      >>> len(Color)
      3

      >>> list(Color)
      [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

      Methods can be added to enumerations, and members can have their own
      attributes -- see the documentation for details.


      .. py:attribute:: OPTIONAL
         :value: 'userVerificationOptional'



      .. py:attribute:: OPTIONAL_WITH_LIST
         :value: 'userVerificationOptionalWithCredentialIDList'



      .. py:attribute:: REQUIRED
         :value: 'userVerificationRequired'




   .. py:attribute:: NAME
      :value: 'credProtect'



   .. py:method:: is_supported(ctap)

      Whether or not the extension is supported by the authenticator.



   .. py:method:: make_credential(ctap, options, pin_protocol)

      Start client extension processing for registration.



.. py:class:: MinPinLengthExtension

   Bases: :py:obj:`Ctap2Extension`


   Implements the Minimum PIN Length (minPinLength) CTAP2 extension.

   https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-minpinlength-extension


   .. py:attribute:: NAME
      :value: 'minPinLength'



   .. py:method:: is_supported(ctap)

      Whether or not the extension is supported by the authenticator.



   .. py:method:: make_credential(ctap, options, pin_protocol)

      Start client extension processing for registration.



.. py:class:: CredentialPropertiesOutput

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Client outputs for credProps.


   .. py:attribute:: rk
      :type:  bool | None
      :value: None



.. py:class:: CredPropsExtension

   Bases: :py:obj:`Ctap2Extension`


   Implements the Credential Properties (credProps) WebAuthn extension.

   https://www.w3.org/TR/webauthn-3/#sctn-authenticator-credential-properties-extension


   .. py:attribute:: NAME
      :value: 'credProps'



   .. py:method:: is_supported(ctap)

      Whether or not the extension is supported by the authenticator.



   .. py:method:: make_credential(ctap, options, pin_protocol)

      Start client extension processing for registration.



.. py:class:: PaymentCurrencyAmount

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   A data class with members also accessible as a JSON-serializable Mapping.


   .. py:attribute:: currency
      :type:  str


   .. py:attribute:: value
      :type:  str


.. py:class:: PaymentCredentialInstrument

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   A data class with members also accessible as a JSON-serializable Mapping.


   .. py:attribute:: display_name
      :type:  str


   .. py:attribute:: icon
      :type:  str


   .. py:attribute:: icon_must_be_shown
      :type:  bool
      :value: True



.. py:class:: AuthenticationExtensionsPaymentInputs

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   Client inputs for payment.


   .. py:attribute:: is_payment
      :type:  bool | None
      :value: None



   .. py:attribute:: rp_id
      :type:  str | None
      :value: None



   .. py:attribute:: top_origin
      :type:  str | None
      :value: None



   .. py:attribute:: payee_name
      :type:  str | None
      :value: None



   .. py:attribute:: payee_origin
      :type:  str | None
      :value: None



   .. py:attribute:: total
      :type:  PaymentCurrencyAmount | None
      :value: None



   .. py:attribute:: instrument
      :type:  PaymentCredentialInstrument | None
      :value: None



.. py:class:: ThirdPartyPaymentExtension

   Bases: :py:obj:`Ctap2Extension`


   Implements the Third Party Payment (thirdPartyPayment) CTAP2.2 extension.

   https://fidoalliance.org/specs/fido-v2.2-ps-20250228/fido-client-to-authenticator-protocol-v2.2-ps-20250228.html#sctn-thirdPartyPayment-extension

   Note that most of the processing for the WebAuthn extension needs to be done by the
   client, see:
   https://www.w3.org/TR/secure-payment-confirmation/#sctn-collectedclientpaymentdata-dictionary

   As such, this extension is not included in the default extensions list, and should
   not be used without a client that supports the WebAuthn payment extension.


   .. py:attribute:: NAME
      :value: 'thirdPartyPayment'



   .. py:method:: is_supported(ctap)

      Whether or not the extension is supported by the authenticator.



   .. py:method:: make_credential(ctap, options, pin_protocol)

      Start client extension processing for registration.



   .. py:method:: get_assertion(ctap, options, pin_protocol)

      Start client extension processing for authentication.



