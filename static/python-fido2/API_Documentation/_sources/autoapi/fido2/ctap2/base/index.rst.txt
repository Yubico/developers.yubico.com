fido2.ctap2.base
================

.. py:module:: fido2.ctap2.base


Classes
-------

.. autoapisummary::

   fido2.ctap2.base.Info
   fido2.ctap2.base.AttestationResponse
   fido2.ctap2.base.AssertionResponse
   fido2.ctap2.base.Ctap2


Functions
---------

.. autoapisummary::

   fido2.ctap2.base.args


Module Contents
---------------

.. py:function:: args(*params)

   Constructs a dict from a list of arguments for sending a CBOR command.
   None elements will be omitted.

   :param params: Arguments, in order, to add to the command.
   :return: The input parameters as a dict.


.. py:class:: Info

   Bases: :py:obj:`_CborDataObject`


   Binary CBOR encoded response data returned by the CTAP2 GET_INFO command.

   See:
   https://fidoalliance.org/specs/fido-v2.2-rd-20230321/fido-client-to-authenticator-protocol-v2.2-rd-20230321.html#authenticatorGetInfo
   for descriptions of these fields.

   Note that while many fields are optional when returned by the authenticator,
   this dataclass uses defaults to represent a missing value such as empty lists
   or dicts, or the integer value 0. These are used rather than None for omitted
   values as long as this can be done without introducing any practical ambiguity.
   This also means that several of these fields may have a 0 value even if the
   specification states that they should be non-zero when returned from the
   authenticator.

   :param _: The binary content of the Info data.


   .. py:attribute:: versions
      :type:  list[str]


   .. py:attribute:: extensions
      :type:  list[str]
      :value: []



   .. py:attribute:: aaguid
      :type:  fido2.webauthn.Aaguid


   .. py:attribute:: options
      :type:  dict[str, bool]


   .. py:attribute:: max_msg_size
      :type:  int
      :value: 1024



   .. py:attribute:: pin_uv_protocols
      :type:  list[int]
      :value: []



   .. py:attribute:: max_creds_in_list
      :type:  int
      :value: 0



   .. py:attribute:: max_cred_id_length
      :type:  int
      :value: 0



   .. py:attribute:: transports
      :type:  list[str]
      :value: []



   .. py:attribute:: algorithms
      :type:  list[dict[str, Any]]
      :value: []



   .. py:attribute:: max_large_blob
      :type:  int
      :value: 0



   .. py:attribute:: force_pin_change
      :type:  bool
      :value: False



   .. py:attribute:: min_pin_length
      :type:  int
      :value: 4



   .. py:attribute:: firmware_version
      :type:  int
      :value: 0



   .. py:attribute:: max_cred_blob_length
      :type:  int
      :value: 0



   .. py:attribute:: max_rpids_for_min_pin
      :type:  int
      :value: 0



   .. py:attribute:: preferred_platform_uv_attempts
      :type:  int
      :value: 0



   .. py:attribute:: uv_modality
      :type:  int
      :value: 0



   .. py:attribute:: certifications
      :type:  dict


   .. py:attribute:: remaining_disc_creds
      :type:  int | None
      :value: None



   .. py:attribute:: vendor_prototype_config_commands
      :type:  list[int]
      :value: []



   .. py:attribute:: attestation_formats
      :type:  list[str]
      :value: ['packed']



   .. py:attribute:: uv_count_since_pin
      :type:  int | None
      :value: None



   .. py:attribute:: long_touch_for_reset
      :type:  bool
      :value: False



   .. py:attribute:: enc_identifier
      :type:  bytes | None
      :value: None



   .. py:attribute:: transports_for_reset
      :type:  list[str]
      :value: []



   .. py:attribute:: pin_complexity_policy
      :type:  bool | None
      :value: None



   .. py:attribute:: pin_complexity_policy_url
      :type:  bytes | None
      :value: None



   .. py:attribute:: max_pin_length
      :type:  int
      :value: 63



   .. py:method:: get_identifier(pin_token)

      Decrypt the device identifier using a persistent PUAT.



.. py:class:: AttestationResponse

   Bases: :py:obj:`_CborDataObject`


   Binary CBOR encoded attestation object.

   :param _: The binary representation of the attestation object.
   :ivar fmt: The type of attestation used.
   :ivar auth_data: The attested authenticator data.
   :ivar att_stmt: The attestation statement.
   :ivar ep_att: Whether an enterprise attestation was returned for this credential.
   :ivar large_blob_key: The largeBlobKey for the credential, if requested.
   :ivar unsigned_extension_outputs: Any unsigned outputs of extensions.


   .. py:attribute:: fmt
      :type:  str


   .. py:attribute:: auth_data
      :type:  fido2.webauthn.AuthenticatorData


   .. py:attribute:: att_stmt
      :type:  dict[str, Any]


   .. py:attribute:: ep_att
      :type:  bool | None
      :value: None



   .. py:attribute:: large_blob_key
      :type:  bytes | None
      :value: None



   .. py:attribute:: unsigned_extension_outputs
      :type:  dict[str, Any]


.. py:class:: AssertionResponse

   Bases: :py:obj:`_CborDataObject`


   Binary CBOR encoded assertion response.

   :param _: The binary representation of the assertion response.
   :ivar credential: The credential used for the assertion.
   :ivar auth_data: The authenticator data part of the response.
   :ivar signature: The digital signature of the assertion.
   :ivar user: The user data of the credential.
   :ivar number_of_credentials: The total number of responses available
       (only set for the first response, if > 1).


   .. py:attribute:: credential
      :type:  Mapping[str, Any]


   .. py:attribute:: auth_data
      :type:  fido2.webauthn.AuthenticatorData


   .. py:attribute:: signature
      :type:  bytes


   .. py:attribute:: user
      :type:  dict[str, Any] | None
      :value: None



   .. py:attribute:: number_of_credentials
      :type:  int | None
      :value: None



   .. py:attribute:: user_selected
      :type:  bool | None
      :value: None



   .. py:attribute:: large_blob_key
      :type:  bytes | None
      :value: None



   .. py:method:: verify(client_param, public_key)

      Verify the digital signature of the response with regard to the
      client_param, using the given public key.

      :param client_param: SHA256 hash of the ClientData used for the request.
      :param public_key: The public key of the credential, to verify.



   .. py:method:: from_ctap1(app_param, credential, authentication)
      :classmethod:


      Create an AssertionResponse from a CTAP1 SignatureData instance.

      :param app_param: SHA256 hash of the RP ID used for the CTAP1 request.
      :param credential: Credential used for the CTAP1 request (from the
          allowList).
      :param authentication: The CTAP1 signature data.
      :return: The assertion response.



.. py:class:: Ctap2(device, strict_cbor = True)

   Implementation of the CTAP2 specification.

   :param device: A CtapHidDevice handle supporting CTAP2.
   :param strict_cbor: Validate that CBOR returned from the Authenticator is
       canonical, defaults to True.


   .. py:class:: CMD

      Bases: :py:obj:`enum.IntEnum`


      Enum where members are also (and must be) ints


      .. py:attribute:: MAKE_CREDENTIAL
         :value: 1



      .. py:attribute:: GET_ASSERTION
         :value: 2



      .. py:attribute:: GET_INFO
         :value: 4



      .. py:attribute:: CLIENT_PIN
         :value: 6



      .. py:attribute:: RESET
         :value: 7



      .. py:attribute:: GET_NEXT_ASSERTION
         :value: 8



      .. py:attribute:: BIO_ENROLLMENT
         :value: 9



      .. py:attribute:: CREDENTIAL_MGMT
         :value: 10



      .. py:attribute:: SELECTION
         :value: 11



      .. py:attribute:: LARGE_BLOBS
         :value: 12



      .. py:attribute:: CONFIG
         :value: 13



      .. py:attribute:: BIO_ENROLLMENT_PRE
         :value: 64



      .. py:attribute:: CREDENTIAL_MGMT_PRE
         :value: 65




   .. py:attribute:: device


   .. py:property:: info
      :type: Info


      Get a cached Info object which can be used to determine capabilities.

      :rtype: Info
      :return: The response of calling GetAuthenticatorInfo.



   .. py:method:: send_cbor(cmd, data = None, *, event = None, on_keepalive = None)

      Sends a CBOR message to the device, and waits for a response.

      :param cmd: The command byte of the request.
      :param data: The payload to send (to be CBOR encoded).
      :param event: Optional threading.Event used to cancel the request.
      :param on_keepalive: Optional function called when keep-alive is sent by
          the authenticator.



   .. py:method:: get_info()

      CTAP2 getInfo command.

      :return: Information about the authenticator.



   .. py:method:: client_pin(pin_uv_protocol, sub_cmd, key_agreement = None, pin_uv_param = None, new_pin_enc = None, pin_hash_enc = None, permissions = None, permissions_rpid = None, *, event = None, on_keepalive = None)

      CTAP2 clientPin command, used for various PIN operations.

      This method is not intended to be called directly. It is intended to be used by
      an instance of the PinProtocolV1 class.

      :param pin_uv_protocol: The PIN/UV protocol version to use.
      :param sub_cmd: A clientPin sub command.
      :param key_agreement: The keyAgreement parameter.
      :param pin_uv_param: The pinAuth parameter.
      :param new_pin_enc: The newPinEnc parameter.
      :param pin_hash_enc: The pinHashEnc parameter.
      :param permissions: The permissions parameter.
      :param permissions_rpid: The permissions RPID parameter.
      :param event: Optional threading.Event used to cancel the request.
      :param on_keepalive: Optional callback function to handle keep-alive
          messages from the authenticator.
      :return: The response of the command, decoded.



   .. py:method:: reset(*, event = None, on_keepalive = None)

      CTAP2 reset command, erases all credentials and PIN.

      :param event: Optional threading.Event object used to cancel the request.
      :param on_keepalive: Optional callback function to handle keep-alive
          messages from the authenticator.



   .. py:method:: make_credential(client_data_hash, rp, user, key_params, exclude_list = None, extensions = None, options = None, pin_uv_param = None, pin_uv_protocol = None, enterprise_attestation = None, *, event = None, on_keepalive = None)

      CTAP2 makeCredential operation.

      :param client_data_hash: SHA256 hash of the ClientData.
      :param rp: PublicKeyCredentialRpEntity parameters.
      :param user: PublicKeyCredentialUserEntity parameters.
      :param key_params: List of acceptable credential types.
      :param exclude_list: Optional list of PublicKeyCredentialDescriptors.
      :param extensions: Optional dict of extensions.
      :param options: Optional dict of options.
      :param pin_uv_param: Optional PIN/UV auth parameter.
      :param pin_uv_protocol: The version of PIN/UV protocol used, if any.
      :param enterprise_attestation: Whether or not to request Enterprise Attestation.
      :param event: Optional threading.Event used to cancel the request.
      :param on_keepalive: Optional callback function to handle keep-alive
          messages from the authenticator.
      :return: The new credential.



   .. py:method:: get_assertion(rp_id, client_data_hash, allow_list = None, extensions = None, options = None, pin_uv_param = None, pin_uv_protocol = None, *, event = None, on_keepalive = None)

      CTAP2 getAssertion command.

      :param rp_id: The RP ID of the credential.
      :param client_data_hash: SHA256 hash of the ClientData used.
      :param allow_list: Optional list of PublicKeyCredentialDescriptors.
      :param extensions: Optional dict of extensions.
      :param options: Optional dict of options.
      :param pin_uv_param: Optional PIN/UV auth parameter.
      :param pin_uv_protocol: The version of PIN/UV protocol used, if any.
      :param event: Optional threading.Event used to cancel the request.
      :param on_keepalive: Optional callback function to handle keep-alive messages
          from the authenticator.
      :return: The new assertion.



   .. py:method:: get_next_assertion()

      CTAP2 getNextAssertion command.

      :return: The next available assertion response.



   .. py:method:: get_assertions(*args, **kwargs)

      Convenience method to get list of assertions.

      See get_assertion and get_next_assertion for details.



   .. py:method:: credential_mgmt(sub_cmd, sub_cmd_params = None, pin_uv_protocol = None, pin_uv_param = None)

      CTAP2 credentialManagement command, used to manage resident
      credentials.

      NOTE: This implements the current draft version of the CTAP2 specification and
      should be considered highly experimental.

      This method is not intended to be called directly. It is intended to be used by
      an instance of the CredentialManagement class.

      :param sub_cmd: A CredentialManagement sub command.
      :param sub_cmd_params: Sub command specific parameters.
      :param pin_uv_protocol: PIN/UV auth protocol version used.
      :param pin_uv_param: PIN/UV Auth parameter.



   .. py:method:: bio_enrollment(modality = None, sub_cmd = None, sub_cmd_params = None, pin_uv_protocol = None, pin_uv_param = None, get_modality = None, *, event = None, on_keepalive = None)

      CTAP2 bio enrollment command. Used to provision/enumerate/delete bio
      enrollments in the authenticator.

      NOTE: This implements the current draft version of the CTAP2 specification and
      should be considered highly experimental.

      This method is not intended to be called directly. It is intended to be used by
      an instance of the BioEnrollment class.

      :param modality: The user verification modality being used.
      :param sub_cmd: A BioEnrollment sub command.
      :param sub_cmd_params: Sub command specific parameters.
      :param pin_uv_protocol: PIN/UV protocol version used.
      :param pin_uv_param: PIN/UV auth param.
      :param get_modality: Get the user verification type modality.



   .. py:method:: selection(*, event = None, on_keepalive = None)

      CTAP2 authenticator selection command.

      This command allows the platform to let a user select a certain authenticator
      by asking for user presence.

      :param event: Optional threading.Event used to cancel the request.
      :param on_keepalive: Optional callback function to handle keep-alive messages
          from the authenticator.



   .. py:method:: large_blobs(offset, get = None, set = None, length = None, pin_uv_param = None, pin_uv_protocol = None)

      CTAP2 authenticator large blobs command.

      This command is used to read and write the large blob array.

      This method is not intended to be called directly. It is intended to be used by
      an instance of the LargeBlobs class.

      :param offset: The offset of where to start reading/writing data.
      :param get: Optional (max) length of data to read.
      :param set: Optional data to write.
      :param length: Length of the payload in set.
      :param pin_uv_protocol: PIN/UV protocol version used.
      :param pin_uv_param: PIN/UV auth param.



   .. py:method:: config(sub_cmd, sub_cmd_params = None, pin_uv_protocol = None, pin_uv_param = None)

      CTAP2 authenticator config command.

      This command is used to configure various authenticator features through the
      use of its subcommands.

      This method is not intended to be called directly. It is intended to be used by
      an instance of the Config class.

      :param sub_cmd: A Config sub command.
      :param sub_cmd_params: Sub command specific parameters.
      :param pin_uv_protocol: PIN/UV auth protocol version used.
      :param pin_uv_param: PIN/UV Auth parameter.



