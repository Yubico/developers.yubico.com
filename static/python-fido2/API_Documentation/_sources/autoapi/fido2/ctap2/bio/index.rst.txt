fido2.ctap2.bio
===============

.. py:module:: fido2.ctap2.bio


Exceptions
----------

.. autoapisummary::

   fido2.ctap2.bio.CaptureError


Classes
-------

.. autoapisummary::

   fido2.ctap2.bio.BioEnrollment
   fido2.ctap2.bio.FPEnrollmentContext
   fido2.ctap2.bio.FPBioEnrollment


Module Contents
---------------

.. py:class:: BioEnrollment(ctap, modality)

   .. py:class:: RESULT

      Bases: :py:obj:`enum.IntEnum`


      Enum where members are also (and must be) ints


      .. py:attribute:: MODALITY
         :value: 1



      .. py:attribute:: FINGERPRINT_KIND
         :value: 2



      .. py:attribute:: MAX_SAMPLES_REQUIRED
         :value: 3



      .. py:attribute:: TEMPLATE_ID
         :value: 4



      .. py:attribute:: LAST_SAMPLE_STATUS
         :value: 5



      .. py:attribute:: REMAINING_SAMPLES
         :value: 6



      .. py:attribute:: TEMPLATE_INFOS
         :value: 7



      .. py:attribute:: MAX_TEMPLATE_FRIENDLY_NAME
         :value: 8




   .. py:class:: TEMPLATE_INFO

      Bases: :py:obj:`enum.IntEnum`


      Enum where members are also (and must be) ints


      .. py:attribute:: ID
         :value: 1



      .. py:attribute:: NAME
         :value: 2




   .. py:class:: MODALITY

      Bases: :py:obj:`enum.IntEnum`


      Enum where members are also (and must be) ints


      .. py:attribute:: FINGERPRINT
         :value: 1




   .. py:method:: is_supported(info)
      :staticmethod:



   .. py:attribute:: ctap


   .. py:attribute:: modality


   .. py:method:: get_modality()

      Get bio modality.

      :return: The type of modality supported by the authenticator.



.. py:exception:: CaptureError(code)

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


   .. py:attribute:: code


.. py:class:: FPEnrollmentContext(bio, timeout = None)

   Helper object to perform fingerprint enrollment.

   :param bio: An instance of FPBioEnrollment.
   :param timeout: Optional timeout for fingerprint captures (ms).
   :ivar remaining: The number of (estimated) remaining samples needed.
   :ivar template_id: The ID of the new template (only available after the initial
       sample has been captured).


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: template_id
      :type:  bytes | None
      :value: None



   .. py:attribute:: remaining
      :type:  int | None
      :value: None



   .. py:method:: capture(event = None, on_keepalive = None)

      Capture a fingerprint sample.

      This call will block for up to timeout milliseconds (or indefinitely, if
      timeout not specified) waiting for the user to scan their fingerprint to
      collect one sample.

      :return: None, if more samples are needed, or the template ID if enrollment is
          completed.



   .. py:method:: cancel()

      Cancels ongoing enrollment.



.. py:class:: FPBioEnrollment(ctap, pin_uv_protocol, pin_uv_token)

   Bases: :py:obj:`BioEnrollment`


   Implementation of the bio enrollment API.

   NOTE: The get_fingerprint_sensor_info method does not require authentication, and
   can be used by setting pin_uv_protocol and pin_uv_token to None.

   :param ctap: An instance of a CTAP2 object.
   :param pin_uv_protocol: The PIN/UV protocol version used.
   :param pin_uv_token: A valid PIN/UV Auth Token for the current CTAP session.


   .. py:class:: CMD

      Bases: :py:obj:`enum.IntEnum`


      Enum where members are also (and must be) ints


      .. py:attribute:: ENROLL_BEGIN
         :value: 1



      .. py:attribute:: ENROLL_CAPTURE_NEXT
         :value: 2



      .. py:attribute:: ENROLL_CANCEL
         :value: 3



      .. py:attribute:: ENUMERATE_ENROLLMENTS
         :value: 4



      .. py:attribute:: SET_NAME
         :value: 5



      .. py:attribute:: REMOVE_ENROLLMENT
         :value: 6



      .. py:attribute:: GET_SENSOR_INFO
         :value: 7




   .. py:class:: PARAM

      Bases: :py:obj:`enum.IntEnum`


      Enum where members are also (and must be) ints


      .. py:attribute:: TEMPLATE_ID
         :value: 1



      .. py:attribute:: TEMPLATE_NAME
         :value: 2



      .. py:attribute:: TIMEOUT_MS
         :value: 3




   .. py:class:: FEEDBACK

      Bases: :py:obj:`enum.IntEnum`


      Enum where members are also (and must be) ints


      .. py:attribute:: FP_GOOD
         :value: 0



      .. py:attribute:: FP_TOO_HIGH
         :value: 1



      .. py:attribute:: FP_TOO_LOW
         :value: 2



      .. py:attribute:: FP_TOO_LEFT
         :value: 3



      .. py:attribute:: FP_TOO_RIGHT
         :value: 4



      .. py:attribute:: FP_TOO_FAST
         :value: 5



      .. py:attribute:: FP_TOO_SLOW
         :value: 6



      .. py:attribute:: FP_POOR_QUALITY
         :value: 7



      .. py:attribute:: FP_TOO_SKEWED
         :value: 8



      .. py:attribute:: FP_TOO_SHORT
         :value: 9



      .. py:attribute:: FP_MERGE_FAILURE
         :value: 10



      .. py:attribute:: FP_EXISTS
         :value: 11



      .. py:attribute:: FP_DATABASE_FULL
         :value: 12



      .. py:attribute:: NO_USER_ACTIVITY
         :value: 13



      .. py:attribute:: NO_UP_TRANSITION
         :value: 14




   .. py:attribute:: pin_uv_protocol


   .. py:attribute:: pin_uv_token


   .. py:method:: get_fingerprint_sensor_info()

      Get fingerprint sensor info.

      :return: A dict containing FINGERPRINT_KIND and MAX_SAMPLES_REQUIRES.



   .. py:method:: enroll_begin(timeout = None, event = None, on_keepalive = None)

      Start fingerprint enrollment.

      Starts the process of enrolling a new fingerprint, and will wait for the user
      to scan their fingerprint once to provide an initial sample.

      :param timeout: Optional timeout in milliseconds.
      :return: A tuple containing the new template ID, the sample status, and the
          number of samples remaining to complete the enrollment.



   .. py:method:: enroll_capture_next(template_id, timeout = None, event = None, on_keepalive = None)

      Continue fingerprint enrollment.

      Continues enrolling a new fingerprint and will wait for the user to scan their
      fingerpring once to provide a new sample.
      Once the number of samples remaining is 0, the enrollment is completed.

      :param template_id: The template ID returned by a call to `enroll_begin`.
      :param timeout: Optional timeout in milliseconds.
      :return: A tuple containing the sample status, and the number of samples
          remaining to complete the enrollment.



   .. py:method:: enroll_cancel()

      Cancel any ongoing fingerprint enrollment.



   .. py:method:: enroll(timeout = None)

      Convenience wrapper for doing fingerprint enrollment.

      See FPEnrollmentContext for details.
      :return: An initialized FPEnrollmentContext.



   .. py:method:: enumerate_enrollments()

      Get a dict of enrolled fingerprint templates which maps template ID's to
      their friendly names.

      :return: A dict of enrolled template_id -> name pairs.



   .. py:method:: set_name(template_id, name)

      Set/Change the friendly name of a previously enrolled fingerprint template.

      :param template_id: The ID of the template to change.
      :param name: A friendly name to give the template.



   .. py:method:: remove_enrollment(template_id)

      Remove a previously enrolled fingerprint template.

      :param template_id: The Id of the template to remove.



