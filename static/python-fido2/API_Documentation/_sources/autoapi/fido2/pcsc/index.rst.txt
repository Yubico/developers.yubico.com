fido2.pcsc
==========

.. py:module:: fido2.pcsc


Attributes
----------

.. autoapisummary::

   fido2.pcsc.AID_FIDO
   fido2.pcsc.SW_SUCCESS
   fido2.pcsc.SW_UPDATE
   fido2.pcsc.SW1_MORE_DATA


Classes
-------

.. autoapisummary::

   fido2.pcsc.CtapPcscDevice


Module Contents
---------------

.. py:data:: AID_FIDO
   :value: b'\xa0\x00\x00\x06G/\x00\x01'


.. py:data:: SW_SUCCESS
   :value: (144, 0)


.. py:data:: SW_UPDATE
   :value: (145, 0)


.. py:data:: SW1_MORE_DATA
   :value: 97


.. py:class:: CtapPcscDevice(connection, name)

   Bases: :py:obj:`fido2.ctap.CtapDevice`


   CtapDevice implementation using pyscard (PCSC).

   This class is intended for use with NFC readers.


   .. py:attribute:: use_ext_apdu
      :value: False



   .. py:method:: connect()


   .. py:property:: version
      :type: int


      CTAPHID protocol version.



   .. py:property:: capabilities
      :type: fido2.hid.CAPABILITY


      Capabilities supported by the device.



   .. py:property:: product_name
      :type: str | None


      Product name of device.



   .. py:property:: serial_number
      :type: int | None


      Serial number of device.



   .. py:method:: get_atr()

      Get the ATR/ATS of the connected card.



   .. py:method:: apdu_exchange(apdu, protocol = None)

      Exchange data with smart card.

      :param apdu: byte string. data to exchange with card
      :return: byte string. response from card



   .. py:method:: control_exchange(control_code, control_data = b'')

      Sends control sequence to reader's driver.

      :param control_code: int. code to send to reader driver.
      :param control_data: byte string. data to send to driver
      :return: byte string. response



   .. py:method:: call(cmd, data = b'', event = None, on_keepalive = None)

      Sends a command to the authenticator, and reads the response.

      :param cmd: The integer value of the command.
      :param data: The payload of the command.
      :param event: An optional threading.Event which can be used to cancel
          the invocation.
      :param on_keepalive: An optional callback to handle keep-alive messages
          from the authenticator. The function is only called once for
          consecutive keep-alive messages with the same status.
      :return: The response from the authenticator.



   .. py:method:: close()

      Close the device, releasing any held resources.



   .. py:method:: list_devices(name = '')
      :classmethod:


      Generates instances of cls for discoverable devices.



