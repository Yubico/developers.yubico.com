fido2.server
============

.. py:module:: fido2.server


Attributes
----------

.. autoapisummary::

   fido2.server.VerifyAttestation
   fido2.server.VerifyOrigin


Classes
-------

.. autoapisummary::

   fido2.server.Fido2Server


Functions
---------

.. autoapisummary::

   fido2.server.to_descriptor


Module Contents
---------------

.. py:data:: VerifyAttestation

.. py:data:: VerifyOrigin

.. py:function:: to_descriptor(credential, transports=None)

   Converts an AttestedCredentialData to a PublicKeyCredentialDescriptor.

   :param credential: AttestedCredentialData containing the credential ID to use.
   :param transports: Optional list of AuthenticatorTransport strings to add to the
       descriptor.
   :return: A descriptor of the credential, for use with register_begin or
       authenticate_begin.
   :rtype: PublicKeyCredentialDescriptor


.. py:class:: Fido2Server(rp, attestation = None, verify_origin = None, verify_attestation = None)

   FIDO2 server.

   :param rp: Relying party data as `PublicKeyCredentialRpEntity` instance.
   :param attestation: (optional) Requirement on authenticator attestation.
   :param verify_origin: (optional) Alternative function to validate an origin.
   :param verify_attestation: (optional) function to validate attestation, which is
       invoked with attestation_object and client_data_hash. It should return nothing
       and raise an exception on failure. By default, attestation is ignored.
       Attestation is also ignored if `attestation` is set to `none`.


   .. py:attribute:: rp
      :value: None



   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: attestation


   .. py:attribute:: allowed_algorithms


   .. py:method:: register_begin(user, credentials = None, resident_key_requirement = None, user_verification = None, authenticator_attachment = None, challenge = None, extensions=None)

      Return a PublicKeyCredentialCreationOptions registration object and
      the internal state dictionary that needs to be passed as is to the
      corresponding `register_complete` call.

      :param user: The dict containing the user data.
      :param credentials: The list of previously registered credentials, these can be
          of type AttestedCredentialData, or PublicKeyCredentialDescriptor.
      :param resident_key_requirement: The desired RESIDENT_KEY_REQUIREMENT level.
      :param user_verification: The desired USER_VERIFICATION level.
      :param authenticator_attachment: The desired AUTHENTICATOR_ATTACHMENT
          or None to not provide a preference (and get both types).
      :param challenge: A custom challenge to sign and verify or None to use
          OS-specific random bytes.
      :return: Registration data, internal state.



   .. py:method:: register_complete(state, response)

      Verify the correctness of the registration data received from
      the client.

      :param state: The state data returned by the corresponding
          `register_begin`.
      :param response: The registration response from the client.
      :return: The authenticator data



   .. py:method:: authenticate_begin(credentials = None, user_verification = None, challenge = None, extensions=None)

      Return a PublicKeyCredentialRequestOptions assertion object and the internal
      state dictionary that needs to be passed as is to the corresponding
      `authenticate_complete` call.

      :param credentials: The list of previously registered credentials, these can be
          of type AttestedCredentialData, or PublicKeyCredentialDescriptor.
      :param user_verification: The desired USER_VERIFICATION level.
      :param challenge: A custom challenge to sign and verify or None to use
          OS-specific random bytes.
      :return: Assertion data, internal state.



   .. py:method:: authenticate_complete(state, credentials, response)

      Verify the correctness of the assertion data received from
      the client.

      :param state: The state data returned by the corresponding
          `register_begin`.
      :param credentials: The list of previously registered credentials.
      :param credential_id: The credential id from the client response.
      :param client_data: The client data.
      :param auth_data: The authenticator data.
      :param signature: The signature provided by the client.



