fido2.client.windows
====================

.. py:module:: fido2.client.windows


Classes
-------

.. autoapisummary::

   fido2.client.windows.CancelThread
   fido2.client.windows.WindowsClient


Module Contents
---------------

.. py:class:: CancelThread(event)

   Bases: :py:obj:`threading.Thread`


   A class that represents a thread of control.

   This class can be safely subclassed in a limited fashion. There are two ways
   to specify the activity: by passing a callable object to the constructor, or
   by overriding the run() method in a subclass.



   .. py:attribute:: daemon
      :value: True


      A boolean value indicating whether this thread is a daemon thread.

      This must be set before start() is called, otherwise RuntimeError is
      raised. Its initial value is inherited from the creating thread; the
      main thread is not a daemon thread and therefore all threads created in
      the main thread default to daemon = False.

      The entire Python program exits when only daemon threads are left.




   .. py:attribute:: event


   .. py:attribute:: guid


   .. py:method:: run()

      Method representing the thread's activity.

      You may override this method in a subclass. The standard run() method
      invokes the callable object passed to the object's constructor as the
      target argument, if any, with sequential and keyword arguments taken
      from the args and kwargs arguments, respectively.




   .. py:method:: complete()


.. py:class:: WindowsClient(client_data_collector, handle=None, allow_hmac_secret=False)

   Bases: :py:obj:`fido2.client.WebAuthnClient`


   Fido2Client-like class using the Windows WebAuthn API.

   Note: This class only works on Windows 10 19H1 or later. This is also when Windows
   started restricting access to FIDO devices, causing the standard client classes to
   require admin priveleges to run (unlike this one).

   :param str origin: The origin to use.
   :param verify: Function to verify an RP ID for a given origin.
   :param ctypes.wintypes.HWND handle: (optional) Window reference to use.


   .. py:attribute:: handle


   .. py:method:: is_available()
      :staticmethod:



   .. py:method:: make_credential(options, event=None)

      Create a credential using Windows WebAuthN APIs.

      :param options: PublicKeyCredentialCreationOptions data.
      :param threading.Event event: (optional) Signal to abort the operation.



   .. py:method:: get_assertion(options, event=None)

      Get assertion using Windows WebAuthN APIs.

      :param options: PublicKeyCredentialRequestOptions data.
      :param threading.Event event: (optional) Signal to abort the operation.



