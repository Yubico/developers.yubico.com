fido2.payment
=============

.. py:module:: fido2.payment


Classes
-------

.. autoapisummary::

   fido2.payment.CollectedClientAdditionalPaymentData
   fido2.payment.CollectedClientPaymentData
   fido2.payment.PaymentClientDataCollector


Module Contents
---------------

.. py:class:: CollectedClientAdditionalPaymentData

   Bases: :py:obj:`fido2.utils._JsonDataObject`


   A data class with members also accessible as a JSON-serializable Mapping.


   .. py:attribute:: rp_id
      :type:  str


   .. py:attribute:: top_origin
      :type:  str


   .. py:attribute:: payee_name
      :type:  str | None
      :value: None



   .. py:attribute:: payee_origin
      :type:  str | None
      :value: None



   .. py:attribute:: total
      :type:  fido2.ctap2.extensions.PaymentCurrencyAmount


   .. py:attribute:: instrument
      :type:  fido2.ctap2.extensions.PaymentCredentialInstrument


.. py:class:: CollectedClientPaymentData(serialized)

   Bases: :py:obj:`fido2.webauthn.CollectedClientData`


   bytes(iterable_of_ints) -> bytes
   bytes(string, encoding[, errors]) -> bytes
   bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
   bytes(int) -> bytes object of size given by the parameter initialized with null bytes
   bytes() -> empty bytes object

   Construct an immutable array of bytes from:
     - an iterable yielding integers in range(256)
     - a text string encoded using the specified encoding
     - any object implementing the buffer API.
     - an integer


   .. py:attribute:: payment
      :type:  CollectedClientAdditionalPaymentData


   .. py:method:: create(type, challenge, origin, cross_origin = False, **kwargs)
      :classmethod:



.. py:class:: PaymentClientDataCollector(origin, verify = verify_rp_id)

   Bases: :py:obj:`fido2.client.DefaultClientDataCollector`


   ClientDataCollector for the WebAuthn "payment" extension.

   This class can be used together with the CTAP2 "thirdPartyPayment" extension to
   enable third-party payment confirmation. It collects the necessary client data and
   validates the options provided by the client.


   .. py:method:: collect_client_data(options)

      Called when the client is preparing a request.

      Should return a CollectedClientData object with the client data for the request,
      as well as the RP ID of the credential.



