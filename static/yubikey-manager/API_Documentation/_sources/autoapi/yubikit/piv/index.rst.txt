yubikit.piv
===========

.. py:module:: yubikit.piv


Attributes
----------

.. autoapisummary::

   yubikit.piv.PublicKey
   yubikit.piv.PrivateKey
   yubikit.piv.SLOT_CARD_MANAGEMENT
   yubikit.piv.SLOT_OCC_AUTH
   yubikit.piv.DEFAULT_MANAGEMENT_KEY
   yubikit.piv.PIN_LEN
   yubikit.piv.TEMPORARY_PIN_LEN
   yubikit.piv.INS_VERIFY
   yubikit.piv.INS_CHANGE_REFERENCE
   yubikit.piv.INS_RESET_RETRY
   yubikit.piv.INS_GENERATE_ASYMMETRIC
   yubikit.piv.INS_AUTHENTICATE
   yubikit.piv.INS_GET_DATA
   yubikit.piv.INS_PUT_DATA
   yubikit.piv.INS_MOVE_KEY
   yubikit.piv.INS_GET_METADATA
   yubikit.piv.INS_ATTEST
   yubikit.piv.INS_SET_PIN_RETRIES
   yubikit.piv.INS_RESET
   yubikit.piv.INS_GET_VERSION
   yubikit.piv.INS_IMPORT_KEY
   yubikit.piv.INS_SET_MGMKEY
   yubikit.piv.TAG_AUTH_WITNESS
   yubikit.piv.TAG_AUTH_CHALLENGE
   yubikit.piv.TAG_AUTH_RESPONSE
   yubikit.piv.TAG_AUTH_EXPONENTIATION
   yubikit.piv.TAG_GEN_ALGORITHM
   yubikit.piv.TAG_OBJ_DATA
   yubikit.piv.TAG_OBJ_ID
   yubikit.piv.TAG_CERTIFICATE
   yubikit.piv.TAG_CERT_INFO
   yubikit.piv.TAG_DYN_AUTH
   yubikit.piv.TAG_LRC
   yubikit.piv.TAG_PIN_POLICY
   yubikit.piv.TAG_TOUCH_POLICY
   yubikit.piv.TAG_METADATA_ALGO
   yubikit.piv.TAG_METADATA_POLICY
   yubikit.piv.TAG_METADATA_ORIGIN
   yubikit.piv.TAG_METADATA_PUBLIC_KEY
   yubikit.piv.TAG_METADATA_IS_DEFAULT
   yubikit.piv.TAG_METADATA_RETRIES
   yubikit.piv.TAG_METADATA_BIO_CONFIGURED
   yubikit.piv.TAG_METADATA_TEMPORARY_PIN
   yubikit.piv.ORIGIN_GENERATED
   yubikit.piv.ORIGIN_IMPORTED
   yubikit.piv.INDEX_PIN_POLICY
   yubikit.piv.INDEX_TOUCH_POLICY
   yubikit.piv.INDEX_RETRIES_TOTAL
   yubikit.piv.INDEX_RETRIES_REMAINING
   yubikit.piv.PIN_P2
   yubikit.piv.PUK_P2
   yubikit.piv.UV_P2
   yubikit.piv.BCD_SS
   yubikit.piv.BCD_FS
   yubikit.piv.BCD_ES


Classes
-------

.. autoapisummary::

   yubikit.piv.ALGORITHM
   yubikit.piv.KEY_TYPE
   yubikit.piv.MANAGEMENT_KEY_TYPE
   yubikit.piv.SLOT
   yubikit.piv.OBJECT_ID
   yubikit.piv.PIN_POLICY
   yubikit.piv.TOUCH_POLICY
   yubikit.piv.PinMetadata
   yubikit.piv.ManagementKeyMetadata
   yubikit.piv.SlotMetadata
   yubikit.piv.BioMetadata
   yubikit.piv.FascN
   yubikit.piv.Chuid
   yubikit.piv.PivSession


Functions
---------

.. autoapisummary::

   yubikit.piv.check_key_support


Module Contents
---------------

.. py:data:: PublicKey

.. py:data:: PrivateKey

.. py:class:: ALGORITHM

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to 'utf-8'.
   errors defaults to 'strict'.


   .. py:attribute:: EC
      :value: 'ec'



   .. py:attribute:: RSA
      :value: 'rsa'



.. py:class:: KEY_TYPE

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: RSA1024
      :value: 6



   .. py:attribute:: RSA2048
      :value: 7



   .. py:attribute:: RSA3072
      :value: 5



   .. py:attribute:: RSA4096
      :value: 22



   .. py:attribute:: ECCP256
      :value: 17



   .. py:attribute:: ECCP384
      :value: 20



   .. py:attribute:: ED25519
      :value: 224



   .. py:attribute:: X25519
      :value: 225



   .. py:method:: __str__()

      Return str(self).



   .. py:property:: algorithm
      :type: ALGORITHM



   .. py:property:: bit_len
      :type: int



   .. py:method:: from_public_key(key)
      :classmethod:



.. py:class:: MANAGEMENT_KEY_TYPE

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: TDES
      :value: 3



   .. py:attribute:: AES128
      :value: 8



   .. py:attribute:: AES192
      :value: 10



   .. py:attribute:: AES256
      :value: 12



   .. py:property:: key_len
      :type: int



   .. py:property:: challenge_len
      :type: int



.. py:data:: SLOT_CARD_MANAGEMENT
   :value: 155


.. py:data:: SLOT_OCC_AUTH
   :value: 150


.. py:class:: SLOT

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: AUTHENTICATION
      :value: 154



   .. py:attribute:: SIGNATURE
      :value: 156



   .. py:attribute:: KEY_MANAGEMENT
      :value: 157



   .. py:attribute:: CARD_AUTH
      :value: 158



   .. py:attribute:: RETIRED1
      :value: 130



   .. py:attribute:: RETIRED2
      :value: 131



   .. py:attribute:: RETIRED3
      :value: 132



   .. py:attribute:: RETIRED4
      :value: 133



   .. py:attribute:: RETIRED5
      :value: 134



   .. py:attribute:: RETIRED6
      :value: 135



   .. py:attribute:: RETIRED7
      :value: 136



   .. py:attribute:: RETIRED8
      :value: 137



   .. py:attribute:: RETIRED9
      :value: 138



   .. py:attribute:: RETIRED10
      :value: 139



   .. py:attribute:: RETIRED11
      :value: 140



   .. py:attribute:: RETIRED12
      :value: 141



   .. py:attribute:: RETIRED13
      :value: 142



   .. py:attribute:: RETIRED14
      :value: 143



   .. py:attribute:: RETIRED15
      :value: 144



   .. py:attribute:: RETIRED16
      :value: 145



   .. py:attribute:: RETIRED17
      :value: 146



   .. py:attribute:: RETIRED18
      :value: 147



   .. py:attribute:: RETIRED19
      :value: 148



   .. py:attribute:: RETIRED20
      :value: 149



   .. py:attribute:: ATTESTATION
      :value: 249



   .. py:method:: __str__()

      Return str(self).



.. py:class:: OBJECT_ID

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: CAPABILITY
      :value: 6275335



   .. py:attribute:: CHUID
      :value: 6275330



   .. py:attribute:: AUTHENTICATION
      :value: 6275333



   .. py:attribute:: FINGERPRINTS
      :value: 6275331



   .. py:attribute:: SECURITY
      :value: 6275334



   .. py:attribute:: FACIAL
      :value: 6275336



   .. py:attribute:: PRINTED
      :value: 6275337



   .. py:attribute:: SIGNATURE
      :value: 6275338



   .. py:attribute:: KEY_MANAGEMENT
      :value: 6275339



   .. py:attribute:: CARD_AUTH
      :value: 6275329



   .. py:attribute:: DISCOVERY
      :value: 126



   .. py:attribute:: KEY_HISTORY
      :value: 6275340



   .. py:attribute:: IRIS
      :value: 6275361



   .. py:attribute:: RETIRED1
      :value: 6275341



   .. py:attribute:: RETIRED2
      :value: 6275342



   .. py:attribute:: RETIRED3
      :value: 6275343



   .. py:attribute:: RETIRED4
      :value: 6275344



   .. py:attribute:: RETIRED5
      :value: 6275345



   .. py:attribute:: RETIRED6
      :value: 6275346



   .. py:attribute:: RETIRED7
      :value: 6275347



   .. py:attribute:: RETIRED8
      :value: 6275348



   .. py:attribute:: RETIRED9
      :value: 6275349



   .. py:attribute:: RETIRED10
      :value: 6275350



   .. py:attribute:: RETIRED11
      :value: 6275351



   .. py:attribute:: RETIRED12
      :value: 6275352



   .. py:attribute:: RETIRED13
      :value: 6275353



   .. py:attribute:: RETIRED14
      :value: 6275354



   .. py:attribute:: RETIRED15
      :value: 6275355



   .. py:attribute:: RETIRED16
      :value: 6275356



   .. py:attribute:: RETIRED17
      :value: 6275357



   .. py:attribute:: RETIRED18
      :value: 6275358



   .. py:attribute:: RETIRED19
      :value: 6275359



   .. py:attribute:: RETIRED20
      :value: 6275360



   .. py:attribute:: ATTESTATION
      :value: 6291201



   .. py:method:: from_slot(slot)
      :classmethod:



.. py:class:: PIN_POLICY

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: DEFAULT
      :value: 0



   .. py:attribute:: NEVER
      :value: 1



   .. py:attribute:: ONCE
      :value: 2



   .. py:attribute:: ALWAYS
      :value: 3



   .. py:attribute:: MATCH_ONCE
      :value: 4



   .. py:attribute:: MATCH_ALWAYS
      :value: 5



.. py:class:: TOUCH_POLICY

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: DEFAULT
      :value: 0



   .. py:attribute:: NEVER
      :value: 1



   .. py:attribute:: ALWAYS
      :value: 2



   .. py:attribute:: CACHED
      :value: 3



.. py:data:: DEFAULT_MANAGEMENT_KEY
   :value: b'\x01\x02\x03\x04\x05\x06\x07\x08\x01\x02\x03\x04\x05\x06\x07\x08\x01\x02\x03\x04\x05\x06\x07\x08'


.. py:data:: PIN_LEN
   :value: 8


.. py:data:: TEMPORARY_PIN_LEN
   :value: 16


.. py:data:: INS_VERIFY
   :value: 32


.. py:data:: INS_CHANGE_REFERENCE
   :value: 36


.. py:data:: INS_RESET_RETRY
   :value: 44


.. py:data:: INS_GENERATE_ASYMMETRIC
   :value: 71


.. py:data:: INS_AUTHENTICATE
   :value: 135


.. py:data:: INS_GET_DATA
   :value: 203


.. py:data:: INS_PUT_DATA
   :value: 219


.. py:data:: INS_MOVE_KEY
   :value: 246


.. py:data:: INS_GET_METADATA
   :value: 247


.. py:data:: INS_ATTEST
   :value: 249


.. py:data:: INS_SET_PIN_RETRIES
   :value: 250


.. py:data:: INS_RESET
   :value: 251


.. py:data:: INS_GET_VERSION
   :value: 253


.. py:data:: INS_IMPORT_KEY
   :value: 254


.. py:data:: INS_SET_MGMKEY
   :value: 255


.. py:data:: TAG_AUTH_WITNESS
   :value: 128


.. py:data:: TAG_AUTH_CHALLENGE
   :value: 129


.. py:data:: TAG_AUTH_RESPONSE
   :value: 130


.. py:data:: TAG_AUTH_EXPONENTIATION
   :value: 133


.. py:data:: TAG_GEN_ALGORITHM
   :value: 128


.. py:data:: TAG_OBJ_DATA
   :value: 83


.. py:data:: TAG_OBJ_ID
   :value: 92


.. py:data:: TAG_CERTIFICATE
   :value: 112


.. py:data:: TAG_CERT_INFO
   :value: 113


.. py:data:: TAG_DYN_AUTH
   :value: 124


.. py:data:: TAG_LRC
   :value: 254


.. py:data:: TAG_PIN_POLICY
   :value: 170


.. py:data:: TAG_TOUCH_POLICY
   :value: 171


.. py:data:: TAG_METADATA_ALGO
   :value: 1


.. py:data:: TAG_METADATA_POLICY
   :value: 2


.. py:data:: TAG_METADATA_ORIGIN
   :value: 3


.. py:data:: TAG_METADATA_PUBLIC_KEY
   :value: 4


.. py:data:: TAG_METADATA_IS_DEFAULT
   :value: 5


.. py:data:: TAG_METADATA_RETRIES
   :value: 6


.. py:data:: TAG_METADATA_BIO_CONFIGURED
   :value: 7


.. py:data:: TAG_METADATA_TEMPORARY_PIN
   :value: 8


.. py:data:: ORIGIN_GENERATED
   :value: 1


.. py:data:: ORIGIN_IMPORTED
   :value: 2


.. py:data:: INDEX_PIN_POLICY
   :value: 0


.. py:data:: INDEX_TOUCH_POLICY
   :value: 1


.. py:data:: INDEX_RETRIES_TOTAL
   :value: 0


.. py:data:: INDEX_RETRIES_REMAINING
   :value: 1


.. py:data:: PIN_P2
   :value: 128


.. py:data:: PUK_P2
   :value: 129


.. py:data:: UV_P2
   :value: 150


.. py:class:: PinMetadata

   .. py:attribute:: default_value
      :type:  bool


   .. py:attribute:: total_attempts
      :type:  int


   .. py:attribute:: attempts_remaining
      :type:  int


.. py:class:: ManagementKeyMetadata

   .. py:attribute:: key_type
      :type:  MANAGEMENT_KEY_TYPE


   .. py:attribute:: default_value
      :type:  bool


   .. py:attribute:: touch_policy
      :type:  TOUCH_POLICY


.. py:class:: SlotMetadata

   .. py:attribute:: key_type
      :type:  KEY_TYPE


   .. py:attribute:: pin_policy
      :type:  PIN_POLICY


   .. py:attribute:: touch_policy
      :type:  TOUCH_POLICY


   .. py:attribute:: generated
      :type:  bool


   .. py:attribute:: public_key_encoded
      :type:  bytes


   .. py:property:: public_key


.. py:class:: BioMetadata

   .. py:attribute:: configured
      :type:  bool


   .. py:attribute:: attempts_remaining
      :type:  int


   .. py:attribute:: temporary_pin
      :type:  bool


.. py:data:: BCD_SS
   :value: '11010'


.. py:data:: BCD_FS
   :value: '10110'


.. py:data:: BCD_ES
   :value: '11111'


.. py:class:: FascN

   FASC-N data structure

   https://www.idmanagement.gov/docs/pacs-tig-scepacs.pdf


   .. py:attribute:: agency_code
      :type:  int


   .. py:attribute:: system_code
      :type:  int


   .. py:attribute:: credential_number
      :type:  int


   .. py:attribute:: credential_series
      :type:  int


   .. py:attribute:: individual_credential_issue
      :type:  int


   .. py:attribute:: person_identifier
      :type:  int


   .. py:attribute:: organizational_category
      :type:  int


   .. py:attribute:: organizational_identifier
      :type:  int


   .. py:attribute:: organization_association_category
      :type:  int


   .. py:method:: __bytes__()


   .. py:method:: from_bytes(value)
      :classmethod:



   .. py:method:: __str__()


.. py:class:: Chuid

   .. py:attribute:: buffer_length
      :type:  Optional[int]
      :value: None



   .. py:attribute:: fasc_n
      :type:  FascN


   .. py:attribute:: agency_code
      :type:  Optional[bytes]
      :value: None



   .. py:attribute:: organizational_identifier
      :type:  Optional[bytes]
      :value: None



   .. py:attribute:: duns
      :type:  Optional[bytes]
      :value: None



   .. py:attribute:: guid
      :type:  bytes


   .. py:attribute:: expiration_date
      :type:  datetime.date


   .. py:attribute:: authentication_key_map
      :type:  Optional[bytes]
      :value: None



   .. py:attribute:: asymmetric_signature
      :type:  bytes


   .. py:attribute:: lrc
      :type:  Optional[int]
      :value: None



   .. py:method:: __post_init__()


   .. py:method:: __bytes__()


   .. py:method:: from_bytes(value)
      :classmethod:



.. py:function:: check_key_support(version, key_type, pin_policy, touch_policy, generate = True)

   Check if a key type is supported by a specific YubiKey firmware version.

   This method will return None if the key (with PIN and touch policies) is supported,
   or it will raise a NotSupportedError if it is not.

   :deprecated: Use PivSession.check_key_support() instead.


.. py:class:: PivSession(connection, scp_key_params = None)

   A session with the PIV application.


   .. py:attribute:: protocol


   .. py:property:: version
      :type: yubikit.core.Version


      The version of the PIV application,
      typically the same as the YubiKey firmware.



   .. py:property:: management_key_type
      :type: MANAGEMENT_KEY_TYPE


      The algorithm of the management key currently in use.



   .. py:method:: reset()

      Factory reset the PIV application data.

      This deletes all user-data from the PIV application, and resets the default
      values for PIN, PUK, and management key.



   .. py:method:: authenticate(management_key: bytes) -> None
                  authenticate(key_type: MANAGEMENT_KEY_TYPE, management_key: bytes) -> None

      Authenticate to PIV with management key.

      :param bytes management_key: The management key in raw bytes.



   .. py:method:: set_management_key(key_type, management_key, require_touch = False)

      Set a new management key.

      :param key_type: The management key type.
      :param management_key: The management key in raw bytes.
      :param require_touch: The touch policy.



   .. py:method:: verify_pin(pin)

      Verify the user by PIN.

      :param pin: The PIN.



   .. py:method:: verify_uv(temporary_pin = False, check_only = False)

      Verify the user by fingerprint (YubiKey Bio only).

      Fingerprint verification will allow usage of private keys which have a PIN
      policy allowing MATCH. For those using MATCH_ALWAYS, the fingerprint must be
      verified just prior to using the key, or by first requesting a temporary PIN
      and then later verifying the PIN just prior to key use.

      :param temporary_pin: Request a temporary PIN for later use within the session.
      :param check_only: Do not verify the user, instead immediately throw an
          InvalidPinException containing the number of remaining attempts.



   .. py:method:: verify_temporary_pin(pin)

      Verify the user via temporary PIN.

      :param pin: A temporary PIN previously requested via verify_uv.



   .. py:method:: get_pin_attempts()

      Get remaining PIN attempts.



   .. py:method:: change_pin(old_pin, new_pin)

      Change the PIN.

      :param old_pin: The current PIN.
      :param new_pin: The new PIN.



   .. py:method:: change_puk(old_puk, new_puk)

      Change the PUK.

      :param old_puk: The current PUK.
      :param new_puk: The new PUK.



   .. py:method:: unblock_pin(puk, new_pin)

      Reset PIN with PUK.

      :param puk: The PUK.
      :param new_pin: The new PIN.



   .. py:method:: set_pin_attempts(pin_attempts, puk_attempts)

      Set PIN retries for PIN and PUK.

      Both PIN and PUK will be reset to default values when this is executed.

      Requires authentication with management key and PIN verification.

      :param pin_attempts: The PIN attempts.
      :param puk_attempts: The PUK attempts.



   .. py:method:: get_pin_metadata()

      Get PIN metadata.



   .. py:method:: get_puk_metadata()

      Get PUK metadata.



   .. py:method:: get_management_key_metadata()

      Get management key metadata.



   .. py:method:: get_slot_metadata(slot)

      Get slot metadata.

      :param slot: The slot to get metadata from.



   .. py:method:: get_bio_metadata()

      Get YubiKey Bio metadata.

      This tells you if fingerprints are enrolled or not, how many fingerprint
      verification attempts remain, and whether or not a temporary PIN is currently
      active.



   .. py:method:: sign(slot, key_type, message, hash_algorithm, padding = None)

      Sign message with key.

      Requires PIN verification.

      :param slot: The slot of the key to use.
      :param key_type: The type of the key to sign with.
      :param message: The message to sign.
      :param hash_algorithm: The pre-signature hash algorithm to use.
      :param padding: The pre-signature padding.



   .. py:method:: decrypt(slot, cipher_text, padding)

      Decrypt cipher text.

      Requires PIN verification.

      :param slot: The slot.
      :param cipher_text: The cipher text to decrypt.
      :param padding: The padding of the plain text.



   .. py:method:: calculate_secret(slot, peer_public_key)

      Calculate shared secret using ECDH.

      Requires PIN verification.

      :param slot: The slot.
      :param peer_public_key: The peer's public key.



   .. py:method:: get_object(object_id)

      Get object by ID.

      Requires PIN verification for protected objects.

      :param object_id: The object identifier.



   .. py:method:: put_object(object_id, data = None)

      Write data to PIV object.

      Requires authentication with management key.

      :param object_id: The object identifier.
      :param data: The object data.



   .. py:method:: get_certificate(slot)

      Get certificate from slot.

      :param slot: The slot to get the certificate from.



   .. py:method:: put_certificate(slot, certificate, compress = False)

      Import certificate to slot.

      Requires authentication with management key.

      :param slot: The slot to import the certificate to.
      :param certificate: The certificate to import.
      :param compress: If the certificate should be compressed or not.



   .. py:method:: delete_certificate(slot)

      Delete certificate.

      Requires authentication with management key.

      :param slot: The slot to delete the certificate from.



   .. py:method:: put_key(slot, private_key, pin_policy = PIN_POLICY.DEFAULT, touch_policy = TOUCH_POLICY.DEFAULT)

      Import a private key to slot.

      Requires authentication with management key.

      :param slot: The slot to import the key to.
      :param private_key: The private key to import.
      :param pin_policy: The PIN policy.
      :param touch_policy: The touch policy.



   .. py:method:: generate_key(slot, key_type, pin_policy = PIN_POLICY.DEFAULT, touch_policy = TOUCH_POLICY.DEFAULT)

      Generate private key in slot.

      Requires authentication with management key.

      :param slot: The slot to generate the private key in.
      :param key_type: The key type.
      :param pin_policy: The PIN policy.
      :param touch_policy: The touch policy.



   .. py:method:: attest_key(slot)

      Attest key in slot.

      :param slot: The slot where the key has been generated.
      :return: A X.509 certificate.



   .. py:method:: move_key(from_slot, to_slot)

      Move key from one slot to another.

      Requires authentication with management key.

      :param from_slot: The slot containing the key to move.
      :param to_slot: The new slot to move the key to.



   .. py:method:: delete_key(slot)

      Delete a key in a slot.

      Requires authentication with management key.

      :param slot: The slot containing the key to delete.



   .. py:method:: check_key_support(key_type, pin_policy, touch_policy, generate, fips_restrictions = False)

      Check if a key type is supported by this YubiKey.

      This method will return None if the key (with PIN and touch policies) is
      supported, or it will raise a NotSupportedError if it is not.

      Set the generate parameter to True to check if generating the key is supported
      (in addition to importing).

      Set fips_restrictions to True to apply restrictions based on FIPS status.



