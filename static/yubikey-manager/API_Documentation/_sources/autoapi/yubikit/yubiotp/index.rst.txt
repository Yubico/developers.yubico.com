yubikit.yubiotp
===============

.. py:module:: yubikit.yubiotp


Attributes
----------

.. autoapisummary::

   yubikit.yubiotp.T
   yubikit.yubiotp.TKTFLAG_UPDATE_MASK
   yubikit.yubiotp.CFGFLAG_UPDATE_MASK
   yubikit.yubiotp.EXTFLAG_UPDATE_MASK
   yubikit.yubiotp.FIXED_SIZE
   yubikit.yubiotp.UID_SIZE
   yubikit.yubiotp.KEY_SIZE
   yubikit.yubiotp.ACC_CODE_SIZE
   yubikit.yubiotp.CONFIG_SIZE
   yubikit.yubiotp.NDEF_DATA_SIZE
   yubikit.yubiotp.HMAC_KEY_SIZE
   yubikit.yubiotp.HMAC_CHALLENGE_SIZE
   yubikit.yubiotp.HMAC_RESPONSE_SIZE
   yubikit.yubiotp.SCAN_CODES_SIZE
   yubikit.yubiotp.SHA1_BLOCK_SIZE
   yubikit.yubiotp.DEFAULT_NDEF_URI
   yubikit.yubiotp.NDEF_URL_PREFIXES
   yubikit.yubiotp.Cfg
   yubikit.yubiotp.INS_CONFIG
   yubikit.yubiotp.INS_YK2_STATUS


Classes
-------

.. autoapisummary::

   yubikit.yubiotp.SLOT
   yubikit.yubiotp.CONFIG_SLOT
   yubikit.yubiotp.TKTFLAG
   yubikit.yubiotp.CFGFLAG
   yubikit.yubiotp.EXTFLAG
   yubikit.yubiotp.NDEF_TYPE
   yubikit.yubiotp.CFGSTATE
   yubikit.yubiotp.SlotConfiguration
   yubikit.yubiotp.HmacSha1SlotConfiguration
   yubikit.yubiotp.KeyboardSlotConfiguration
   yubikit.yubiotp.HotpSlotConfiguration
   yubikit.yubiotp.StaticPasswordSlotConfiguration
   yubikit.yubiotp.YubiOtpSlotConfiguration
   yubikit.yubiotp.StaticTicketSlotConfiguration
   yubikit.yubiotp.UpdateConfiguration
   yubikit.yubiotp.ConfigState
   yubikit.yubiotp.YubiOtpSession


Module Contents
---------------

.. py:data:: T

.. py:class:: SLOT

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: ONE
      :value: 1



   .. py:attribute:: TWO
      :value: 2



   .. py:method:: map(slot, one, two)
      :staticmethod:



.. py:class:: CONFIG_SLOT

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: CONFIG_1
      :value: 1



   .. py:attribute:: NAV
      :value: 2



   .. py:attribute:: CONFIG_2
      :value: 3



   .. py:attribute:: UPDATE_1
      :value: 4



   .. py:attribute:: UPDATE_2
      :value: 5



   .. py:attribute:: SWAP
      :value: 6



   .. py:attribute:: NDEF_1
      :value: 8



   .. py:attribute:: NDEF_2
      :value: 9



   .. py:attribute:: DEVICE_SERIAL
      :value: 16



   .. py:attribute:: DEVICE_CONFIG
      :value: 17



   .. py:attribute:: SCAN_MAP
      :value: 18



   .. py:attribute:: YK4_CAPABILITIES
      :value: 19



   .. py:attribute:: YK4_SET_DEVICE_INFO
      :value: 21



   .. py:attribute:: CHAL_OTP_1
      :value: 32



   .. py:attribute:: CHAL_OTP_2
      :value: 40



   .. py:attribute:: CHAL_HMAC_1
      :value: 48



   .. py:attribute:: CHAL_HMAC_2
      :value: 56



.. py:class:: TKTFLAG

   Bases: :py:obj:`enum.IntFlag`


   Support for integer-based Flags


   .. py:attribute:: TAB_FIRST
      :value: 1



   .. py:attribute:: APPEND_TAB1
      :value: 2



   .. py:attribute:: APPEND_TAB2
      :value: 4



   .. py:attribute:: APPEND_DELAY1
      :value: 8



   .. py:attribute:: APPEND_DELAY2
      :value: 16



   .. py:attribute:: APPEND_CR
      :value: 32



   .. py:attribute:: PROTECT_CFG2
      :value: 128



   .. py:attribute:: OATH_HOTP
      :value: 64



   .. py:attribute:: CHAL_RESP
      :value: 64



.. py:class:: CFGFLAG

   Bases: :py:obj:`enum.IntFlag`


   Support for integer-based Flags


   .. py:attribute:: SEND_REF
      :value: 1



   .. py:attribute:: PACING_10MS
      :value: 4



   .. py:attribute:: PACING_20MS
      :value: 8



   .. py:attribute:: STATIC_TICKET
      :value: 32



   .. py:attribute:: TICKET_FIRST
      :value: 2



   .. py:attribute:: ALLOW_HIDTRIG
      :value: 16



   .. py:attribute:: SHORT_TICKET
      :value: 2



   .. py:attribute:: STRONG_PW1
      :value: 16



   .. py:attribute:: STRONG_PW2
      :value: 64



   .. py:attribute:: MAN_UPDATE
      :value: 128



   .. py:attribute:: OATH_HOTP8
      :value: 2



   .. py:attribute:: OATH_FIXED_MODHEX1
      :value: 16



   .. py:attribute:: OATH_FIXED_MODHEX2
      :value: 64



   .. py:attribute:: OATH_FIXED_MODHEX
      :value: 80



   .. py:attribute:: OATH_FIXED_MASK
      :value: 80



   .. py:attribute:: CHAL_YUBICO
      :value: 32



   .. py:attribute:: CHAL_HMAC
      :value: 34



   .. py:attribute:: HMAC_LT64
      :value: 4



   .. py:attribute:: CHAL_BTN_TRIG
      :value: 8



.. py:class:: EXTFLAG

   Bases: :py:obj:`enum.IntFlag`


   Support for integer-based Flags


   .. py:attribute:: SERIAL_BTN_VISIBLE
      :value: 1



   .. py:attribute:: SERIAL_USB_VISIBLE
      :value: 2



   .. py:attribute:: SERIAL_API_VISIBLE
      :value: 4



   .. py:attribute:: USE_NUMERIC_KEYPAD
      :value: 8



   .. py:attribute:: FAST_TRIG
      :value: 16



   .. py:attribute:: ALLOW_UPDATE
      :value: 32



   .. py:attribute:: DORMANT
      :value: 64



   .. py:attribute:: LED_INV
      :value: 128



.. py:data:: TKTFLAG_UPDATE_MASK

.. py:data:: CFGFLAG_UPDATE_MASK

.. py:data:: EXTFLAG_UPDATE_MASK

.. py:data:: FIXED_SIZE
   :value: 16


.. py:data:: UID_SIZE
   :value: 6


.. py:data:: KEY_SIZE
   :value: 16


.. py:data:: ACC_CODE_SIZE
   :value: 6


.. py:data:: CONFIG_SIZE
   :value: 52


.. py:data:: NDEF_DATA_SIZE
   :value: 54


.. py:data:: HMAC_KEY_SIZE
   :value: 20


.. py:data:: HMAC_CHALLENGE_SIZE
   :value: 64


.. py:data:: HMAC_RESPONSE_SIZE
   :value: 20


.. py:data:: SCAN_CODES_SIZE
   :value: 38


.. py:data:: SHA1_BLOCK_SIZE
   :value: 64


.. py:class:: NDEF_TYPE

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: TEXT


   .. py:attribute:: URI


.. py:data:: DEFAULT_NDEF_URI
   :value: 'https://my.yubico.com/yk/#'


.. py:data:: NDEF_URL_PREFIXES
   :value: ('http://www.', 'https://www.', 'http://', 'https://', 'tel:', 'mailto:',...


.. py:class:: CFGSTATE

   Bases: :py:obj:`enum.IntFlag`


   Support for integer-based Flags


   .. py:attribute:: SLOT1_VALID
      :value: 1



   .. py:attribute:: SLOT2_VALID
      :value: 2



   .. py:attribute:: SLOT1_TOUCH
      :value: 4



   .. py:attribute:: SLOT2_TOUCH
      :value: 8



   .. py:attribute:: LED_INV
      :value: 16



.. py:data:: Cfg

.. py:class:: SlotConfiguration

   .. py:method:: is_supported_by(version)


   .. py:method:: get_config(acc_code = None)


   .. py:method:: serial_api_visible(value)


   .. py:method:: serial_usb_visible(value)


   .. py:method:: allow_update(value)


   .. py:method:: dormant(value)


   .. py:method:: invert_led(value)


   .. py:method:: protect_slot2(value)


.. py:class:: HmacSha1SlotConfiguration(key)

   Bases: :py:obj:`SlotConfiguration`


   .. py:method:: is_supported_by(version)


   .. py:method:: require_touch(value)


   .. py:method:: lt64(value)


.. py:class:: KeyboardSlotConfiguration

   Bases: :py:obj:`SlotConfiguration`


   .. py:method:: append_cr(value)


   .. py:method:: fast_trigger(value)


   .. py:method:: pacing(pacing_10ms = False, pacing_20ms = False)


   .. py:method:: use_numeric(value)


.. py:class:: HotpSlotConfiguration(key)

   Bases: :py:obj:`KeyboardSlotConfiguration`


   .. py:method:: is_supported_by(version)


   .. py:method:: digits8(value)


   .. py:method:: token_id(token_id, fixed_modhex1 = False, fixed_modhex2 = True)


   .. py:method:: imf(imf)


.. py:class:: StaticPasswordSlotConfiguration(scan_codes)

   Bases: :py:obj:`KeyboardSlotConfiguration`


   .. py:method:: is_supported_by(version)


.. py:class:: YubiOtpSlotConfiguration(fixed, uid, key)

   Bases: :py:obj:`KeyboardSlotConfiguration`


   .. py:method:: tabs(before = False, after_first = False, after_second = False)


   .. py:method:: delay(after_first = False, after_second = False)


   .. py:method:: send_reference(value)


.. py:class:: StaticTicketSlotConfiguration(fixed, uid, key)

   Bases: :py:obj:`KeyboardSlotConfiguration`


   .. py:method:: short_ticket(value)


   .. py:method:: strong_password(upper_case = False, digit = False, special = False)


   .. py:method:: manual_update(value)


.. py:class:: UpdateConfiguration

   Bases: :py:obj:`KeyboardSlotConfiguration`


   .. py:method:: is_supported_by(version)


   .. py:method:: protect_slot2(value)


   .. py:method:: tabs(before = False, after_first = False, after_second = False)


   .. py:method:: delay(after_first = False, after_second = False)


.. py:class:: ConfigState(version, touch_level)

   The configuration state of the YubiOTP application.


   .. py:attribute:: version


   .. py:attribute:: flags


   .. py:method:: is_configured(slot)

      Checks of a slot is programmed, or empty



   .. py:method:: is_touch_triggered(slot)

      Checks if a (programmed) state is triggered by touch (not challenge-response)
      Requires YubiKey 3 or later.



   .. py:method:: is_led_inverted()

      Checks if the LED behavior is inverted.



   .. py:method:: __repr__()


.. py:data:: INS_CONFIG
   :value: 1


.. py:data:: INS_YK2_STATUS
   :value: 3


.. py:class:: YubiOtpSession(connection, scp_key_params = None)

   A session with the YubiOTP application.


   .. py:method:: close()

      Close the underlying connection.

      :deprecated: call .close() on the underlying connection instead.



   .. py:property:: version
      :type: yubikit.core.Version


      The version of the Yubico OTP application,
      typically the same as the YubiKey firmware.



   .. py:method:: get_serial()

      Get serial number.



   .. py:method:: get_config_state()

      Get configuration state of the YubiOTP application.



   .. py:method:: put_configuration(slot, configuration, acc_code = None, cur_acc_code = None)

      Write configuration to slot.

      :param slot: The slot to configure.
      :param configuration: The slot configuration.
      :param acc_code: The new access code.
      :param cur_acc_code: The current access code.



   .. py:method:: update_configuration(slot, configuration, acc_code = None, cur_acc_code = None)

      Update configuration in slot.

      :param slot: The slot to update the configuration in.
      :param configuration: The slot configuration.
      :param acc_code: The new access code.
      :param cur_acc_code: The current access code.



   .. py:method:: swap_slots()

      Swap the two slot configurations.



   .. py:method:: delete_slot(slot, cur_acc_code = None)

      Delete configuration stored in slot.

      :param slot: The slot to delete the configuration in.
      :param cur_acc_code: The current access code.



   .. py:method:: set_scan_map(scan_map, cur_acc_code = None)

      Update scan-codes on YubiKey.

      This updates the scan-codes (or keyboard presses) that the YubiKey
      will use when typing out OTPs.



   .. py:method:: set_ndef_configuration(slot, uri = None, cur_acc_code = None, ndef_type = NDEF_TYPE.URI)

      Configure a slot to be used over NDEF (NFC).

      :param slot: The slot to configure.
      :param uri: URI or static text.
      :param cur_acc_code: The current access code.
      :param ndef_type: The NDEF type (text or URI).



   .. py:method:: calculate_hmac_sha1(slot, challenge, event = None, on_keepalive = None)

      Perform a challenge-response operation using HMAC-SHA1.

      :param slot: The slot to perform the operation against.
      :param challenge: The challenge.
      :param event: An event.



