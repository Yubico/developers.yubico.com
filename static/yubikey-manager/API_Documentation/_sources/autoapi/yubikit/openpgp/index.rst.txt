yubikit.openpgp
===============

.. py:module:: yubikit.openpgp


Attributes
----------

.. autoapisummary::

   yubikit.openpgp.DEFAULT_USER_PIN
   yubikit.openpgp.DEFAULT_ADMIN_PIN
   yubikit.openpgp.TAG_DISCRETIONARY
   yubikit.openpgp.TAG_EXTENDED_CAPABILITIES
   yubikit.openpgp.TAG_FINGERPRINTS
   yubikit.openpgp.TAG_CA_FINGERPRINTS
   yubikit.openpgp.TAG_GENERATION_TIMES
   yubikit.openpgp.TAG_SIGNATURE_COUNTER
   yubikit.openpgp.TAG_KEY_INFORMATION
   yubikit.openpgp.TAG_PUBLIC_KEY
   yubikit.openpgp.KeyInformation
   yubikit.openpgp.Fingerprints
   yubikit.openpgp.GenerationTimes
   yubikit.openpgp.EcPublicKey
   yubikit.openpgp.PublicKey
   yubikit.openpgp.EcPrivateKey
   yubikit.openpgp.PrivateKey


Classes
-------

.. autoapisummary::

   yubikit.openpgp.UIF
   yubikit.openpgp.PIN_POLICY
   yubikit.openpgp.INS
   yubikit.openpgp.PW
   yubikit.openpgp.DO
   yubikit.openpgp.OpenPgpAid
   yubikit.openpgp.EXTENDED_CAPABILITY_FLAGS
   yubikit.openpgp.CardholderRelatedData
   yubikit.openpgp.ExtendedLengthInfo
   yubikit.openpgp.GENERAL_FEATURE_MANAGEMENT
   yubikit.openpgp.ExtendedCapabilities
   yubikit.openpgp.PwStatus
   yubikit.openpgp.CRT
   yubikit.openpgp.KEY_REF
   yubikit.openpgp.KEY_STATUS
   yubikit.openpgp.AlgorithmAttributes
   yubikit.openpgp.RSA_SIZE
   yubikit.openpgp.RSA_IMPORT_FORMAT
   yubikit.openpgp.RsaAttributes
   yubikit.openpgp.CurveOid
   yubikit.openpgp.OID
   yubikit.openpgp.EC_IMPORT_FORMAT
   yubikit.openpgp.EcAttributes
   yubikit.openpgp.DiscretionaryDataObjects
   yubikit.openpgp.ApplicationRelatedData
   yubikit.openpgp.SecuritySupportTemplate
   yubikit.openpgp.Kdf
   yubikit.openpgp.KdfNone
   yubikit.openpgp.HASH_ALGORITHM
   yubikit.openpgp.KdfIterSaltedS2k
   yubikit.openpgp.PrivateKeyTemplate
   yubikit.openpgp.RsaKeyTemplate
   yubikit.openpgp.RsaCrtKeyTemplate
   yubikit.openpgp.EcKeyTemplate
   yubikit.openpgp.OpenPgpSession


Module Contents
---------------

.. py:data:: DEFAULT_USER_PIN
   :value: '123456'


.. py:data:: DEFAULT_ADMIN_PIN
   :value: '12345678'


.. py:class:: UIF

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: OFF
      :value: 0



   .. py:attribute:: ON
      :value: 1



   .. py:attribute:: FIXED
      :value: 2



   .. py:attribute:: CACHED
      :value: 3



   .. py:attribute:: CACHED_FIXED
      :value: 4



   .. py:method:: parse(encoded)
      :classmethod:



   .. py:method:: __bytes__()


   .. py:property:: is_fixed
      :type: bool



   .. py:property:: is_cached
      :type: bool



   .. py:method:: __str__()

      Return str(self).



.. py:class:: PIN_POLICY

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: ALWAYS
      :value: 0



   .. py:attribute:: ONCE
      :value: 1



   .. py:method:: __str__()

      Return str(self).



.. py:class:: INS

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: VERIFY
      :value: 32



   .. py:attribute:: CHANGE_PIN
      :value: 36



   .. py:attribute:: RESET_RETRY_COUNTER
      :value: 44



   .. py:attribute:: PSO
      :value: 42



   .. py:attribute:: ACTIVATE
      :value: 68



   .. py:attribute:: GENERATE_ASYM
      :value: 71



   .. py:attribute:: GET_CHALLENGE
      :value: 132



   .. py:attribute:: INTERNAL_AUTHENTICATE
      :value: 136



   .. py:attribute:: SELECT_DATA
      :value: 165



   .. py:attribute:: GET_DATA
      :value: 202



   .. py:attribute:: PUT_DATA
      :value: 218



   .. py:attribute:: PUT_DATA_ODD
      :value: 219



   .. py:attribute:: TERMINATE
      :value: 230



   .. py:attribute:: GET_VERSION
      :value: 241



   .. py:attribute:: SET_PIN_RETRIES
      :value: 242



   .. py:attribute:: GET_ATTESTATION
      :value: 251



.. py:data:: TAG_DISCRETIONARY
   :value: 115


.. py:data:: TAG_EXTENDED_CAPABILITIES
   :value: 192


.. py:data:: TAG_FINGERPRINTS
   :value: 197


.. py:data:: TAG_CA_FINGERPRINTS
   :value: 198


.. py:data:: TAG_GENERATION_TIMES
   :value: 205


.. py:data:: TAG_SIGNATURE_COUNTER
   :value: 147


.. py:data:: TAG_KEY_INFORMATION
   :value: 222


.. py:data:: TAG_PUBLIC_KEY
   :value: 32585


.. py:class:: PW

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: USER
      :value: 129



   .. py:attribute:: RESET
      :value: 130



   .. py:attribute:: ADMIN
      :value: 131



.. py:class:: DO

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: PRIVATE_USE_1
      :value: 257



   .. py:attribute:: PRIVATE_USE_2
      :value: 258



   .. py:attribute:: PRIVATE_USE_3
      :value: 259



   .. py:attribute:: PRIVATE_USE_4
      :value: 260



   .. py:attribute:: AID
      :value: 79



   .. py:attribute:: NAME
      :value: 91



   .. py:attribute:: LOGIN_DATA
      :value: 94



   .. py:attribute:: LANGUAGE
      :value: 61229



   .. py:attribute:: SEX
      :value: 24373



   .. py:attribute:: URL
      :value: 24400



   .. py:attribute:: HISTORICAL_BYTES
      :value: 24402



   .. py:attribute:: EXTENDED_LENGTH_INFO
      :value: 32614



   .. py:attribute:: GENERAL_FEATURE_MANAGEMENT
      :value: 32628



   .. py:attribute:: CARDHOLDER_RELATED_DATA
      :value: 101



   .. py:attribute:: APPLICATION_RELATED_DATA
      :value: 110



   .. py:attribute:: ALGORITHM_ATTRIBUTES_SIG
      :value: 193



   .. py:attribute:: ALGORITHM_ATTRIBUTES_DEC
      :value: 194



   .. py:attribute:: ALGORITHM_ATTRIBUTES_AUT
      :value: 195



   .. py:attribute:: ALGORITHM_ATTRIBUTES_ATT
      :value: 218



   .. py:attribute:: PW_STATUS_BYTES
      :value: 196



   .. py:attribute:: FINGERPRINT_SIG
      :value: 199



   .. py:attribute:: FINGERPRINT_DEC
      :value: 200



   .. py:attribute:: FINGERPRINT_AUT
      :value: 201



   .. py:attribute:: FINGERPRINT_ATT
      :value: 219



   .. py:attribute:: CA_FINGERPRINT_1
      :value: 202



   .. py:attribute:: CA_FINGERPRINT_2
      :value: 203



   .. py:attribute:: CA_FINGERPRINT_3
      :value: 204



   .. py:attribute:: CA_FINGERPRINT_4
      :value: 220



   .. py:attribute:: GENERATION_TIME_SIG
      :value: 206



   .. py:attribute:: GENERATION_TIME_DEC
      :value: 207



   .. py:attribute:: GENERATION_TIME_AUT
      :value: 208



   .. py:attribute:: GENERATION_TIME_ATT
      :value: 221



   .. py:attribute:: RESETTING_CODE
      :value: 211



   .. py:attribute:: UIF_SIG
      :value: 214



   .. py:attribute:: UIF_DEC
      :value: 215



   .. py:attribute:: UIF_AUT
      :value: 216



   .. py:attribute:: UIF_ATT
      :value: 217



   .. py:attribute:: SECURITY_SUPPORT_TEMPLATE
      :value: 122



   .. py:attribute:: CARDHOLDER_CERTIFICATE
      :value: 32545



   .. py:attribute:: KDF
      :value: 249



   .. py:attribute:: ALGORITHM_INFORMATION
      :value: 250



   .. py:attribute:: ATT_CERTIFICATE
      :value: 252



.. py:class:: OpenPgpAid

   Bases: :py:obj:`bytes`


   OpenPGP Application Identifier (AID)

   The OpenPGP AID is a string of bytes identifying the OpenPGP application.
   It also embeds some values which are accessible though properties.


   .. py:property:: version
      :type: tuple[int, int]


      OpenPGP version (tuple of 2 integers: main version, secondary version).



   .. py:property:: manufacturer
      :type: int


      16-bit integer value identifying the manufacturer of the device.

      This should be 6 for Yubico devices.



   .. py:property:: serial
      :type: int


      The serial number of the YubiKey.

      NOTE: This value is encoded in BCD. In the event of an invalid value (hex A-F)
      the entire 4 byte value will instead be decoded as an unsigned integer,
      and negated.



.. py:class:: EXTENDED_CAPABILITY_FLAGS

   Bases: :py:obj:`enum.IntFlag`


   Support for integer-based Flags


   .. py:attribute:: KDF
      :value: 1



   .. py:attribute:: PSO_DEC_ENC_AES
      :value: 2



   .. py:attribute:: ALGORITHM_ATTRIBUTES_CHANGEABLE
      :value: 4



   .. py:attribute:: PRIVATE_USE
      :value: 8



   .. py:attribute:: PW_STATUS_CHANGEABLE
      :value: 16



   .. py:attribute:: KEY_IMPORT
      :value: 32



   .. py:attribute:: GET_CHALLENGE
      :value: 64



   .. py:attribute:: SECURE_MESSAGING
      :value: 128



.. py:class:: CardholderRelatedData

   .. py:attribute:: name
      :type:  bytes


   .. py:attribute:: language
      :type:  bytes


   .. py:attribute:: sex
      :type:  int


   .. py:method:: parse(encoded)
      :classmethod:



.. py:class:: ExtendedLengthInfo

   .. py:attribute:: request_max_bytes
      :type:  int


   .. py:attribute:: response_max_bytes
      :type:  int


   .. py:method:: parse(encoded)
      :classmethod:



.. py:class:: GENERAL_FEATURE_MANAGEMENT

   Bases: :py:obj:`enum.IntFlag`


   Support for integer-based Flags


   .. py:attribute:: TOUCHSCREEN
      :value: 1



   .. py:attribute:: MICROPHONE
      :value: 2



   .. py:attribute:: LOUDSPEAKER
      :value: 4



   .. py:attribute:: LED
      :value: 8



   .. py:attribute:: KEYPAD
      :value: 16



   .. py:attribute:: BUTTON
      :value: 32



   .. py:attribute:: BIOMETRIC
      :value: 64



   .. py:attribute:: DISPLAY
      :value: 128



.. py:class:: ExtendedCapabilities

   .. py:attribute:: flags
      :type:  EXTENDED_CAPABILITY_FLAGS


   .. py:attribute:: sm_algorithm
      :type:  int


   .. py:attribute:: challenge_max_length
      :type:  int


   .. py:attribute:: certificate_max_length
      :type:  int


   .. py:attribute:: special_do_max_length
      :type:  int


   .. py:attribute:: pin_block_2_format
      :type:  bool


   .. py:attribute:: mse_command
      :type:  bool


   .. py:method:: parse(encoded)
      :classmethod:



.. py:class:: PwStatus

   .. py:attribute:: pin_policy_user
      :type:  PIN_POLICY


   .. py:attribute:: max_len_user
      :type:  int


   .. py:attribute:: max_len_reset
      :type:  int


   .. py:attribute:: max_len_admin
      :type:  int


   .. py:attribute:: attempts_user
      :type:  int


   .. py:attribute:: attempts_reset
      :type:  int


   .. py:attribute:: attempts_admin
      :type:  int


   .. py:method:: get_max_len(pw)


   .. py:method:: get_attempts(pw)


   .. py:method:: parse(encoded)
      :classmethod:



.. py:class:: CRT

   Bases: :py:obj:`bytes`, :py:obj:`enum.Enum`


   Control Reference Template values.


   .. py:attribute:: SIG


   .. py:attribute:: DEC


   .. py:attribute:: AUT


   .. py:attribute:: ATT


.. py:class:: KEY_REF

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: SIG
      :value: 1



   .. py:attribute:: DEC
      :value: 2



   .. py:attribute:: AUT
      :value: 3



   .. py:attribute:: ATT
      :value: 129



   .. py:property:: algorithm_attributes_do
      :type: DO



   .. py:property:: uif_do
      :type: DO



   .. py:property:: generation_time_do
      :type: DO



   .. py:property:: fingerprint_do
      :type: DO



   .. py:property:: crt
      :type: CRT



.. py:class:: KEY_STATUS

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: NONE
      :value: 0



   .. py:attribute:: GENERATED
      :value: 1



   .. py:attribute:: IMPORTED
      :value: 2



.. py:data:: KeyInformation

.. py:data:: Fingerprints

.. py:data:: GenerationTimes

.. py:data:: EcPublicKey

.. py:data:: PublicKey

.. py:data:: EcPrivateKey

.. py:data:: PrivateKey

.. py:class:: AlgorithmAttributes

   Bases: :py:obj:`abc.ABC`


   OpenPGP key algorithm attributes.


   .. py:attribute:: algorithm_id
      :type:  int


   .. py:method:: parse(encoded)
      :classmethod:



   .. py:method:: __bytes__()
      :abstractmethod:



.. py:class:: RSA_SIZE

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: RSA2048
      :value: 2048



   .. py:attribute:: RSA3072
      :value: 3072



   .. py:attribute:: RSA4096
      :value: 4096



.. py:class:: RSA_IMPORT_FORMAT

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: STANDARD
      :value: 0



   .. py:attribute:: STANDARD_W_MOD
      :value: 1



   .. py:attribute:: CRT
      :value: 2



   .. py:attribute:: CRT_W_MOD
      :value: 3



.. py:class:: RsaAttributes

   Bases: :py:obj:`AlgorithmAttributes`


   OpenPGP key algorithm attributes.


   .. py:attribute:: n_len
      :type:  int


   .. py:attribute:: e_len
      :type:  int


   .. py:attribute:: import_format
      :type:  RSA_IMPORT_FORMAT


   .. py:method:: create(n_len, import_format = RSA_IMPORT_FORMAT.STANDARD)
      :classmethod:



   .. py:method:: __bytes__()


.. py:class:: CurveOid

   Bases: :py:obj:`bytes`


   bytes(iterable_of_ints) -> bytes
   bytes(string, encoding[, errors]) -> bytes
   bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
   bytes(int) -> bytes object of size given by the parameter initialized with null bytes
   bytes() -> empty bytes object

   Construct an immutable array of bytes from:
     - an iterable yielding integers in range(256)
     - a text string encoded using the specified encoding
     - any object implementing the buffer API.
     - an integer


   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OID

   Bases: :py:obj:`CurveOid`, :py:obj:`enum.Enum`


   bytes(iterable_of_ints) -> bytes
   bytes(string, encoding[, errors]) -> bytes
   bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
   bytes(int) -> bytes object of size given by the parameter initialized with null bytes
   bytes() -> empty bytes object

   Construct an immutable array of bytes from:
     - an iterable yielding integers in range(256)
     - a text string encoded using the specified encoding
     - any object implementing the buffer API.
     - an integer


   .. py:attribute:: SECP256R1


   .. py:attribute:: SECP256K1


   .. py:attribute:: SECP384R1


   .. py:attribute:: SECP521R1


   .. py:attribute:: BrainpoolP256R1


   .. py:attribute:: BrainpoolP384R1


   .. py:attribute:: BrainpoolP512R1


   .. py:attribute:: X25519


   .. py:attribute:: Ed25519


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __str__()

      Return str(self).



.. py:class:: EC_IMPORT_FORMAT

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: STANDARD
      :value: 0



   .. py:attribute:: STANDARD_W_PUBKEY
      :value: 255



.. py:class:: EcAttributes

   Bases: :py:obj:`AlgorithmAttributes`


   OpenPGP key algorithm attributes.


   .. py:attribute:: oid
      :type:  CurveOid


   .. py:attribute:: import_format
      :type:  EC_IMPORT_FORMAT


   .. py:method:: create(key_ref, oid)
      :classmethod:



   .. py:method:: __bytes__()


.. py:class:: DiscretionaryDataObjects

   .. py:attribute:: extended_capabilities
      :type:  ExtendedCapabilities


   .. py:attribute:: attributes_sig
      :type:  AlgorithmAttributes


   .. py:attribute:: attributes_dec
      :type:  AlgorithmAttributes


   .. py:attribute:: attributes_aut
      :type:  AlgorithmAttributes


   .. py:attribute:: attributes_att
      :type:  Optional[AlgorithmAttributes]


   .. py:attribute:: pw_status
      :type:  PwStatus


   .. py:attribute:: fingerprints
      :type:  Fingerprints


   .. py:attribute:: ca_fingerprints
      :type:  Fingerprints


   .. py:attribute:: generation_times
      :type:  GenerationTimes


   .. py:attribute:: key_information
      :type:  KeyInformation


   .. py:attribute:: uif_sig
      :type:  Optional[UIF]


   .. py:attribute:: uif_dec
      :type:  Optional[UIF]


   .. py:attribute:: uif_aut
      :type:  Optional[UIF]


   .. py:attribute:: uif_att
      :type:  Optional[UIF]


   .. py:method:: parse(encoded)
      :classmethod:



   .. py:method:: get_algorithm_attributes(key_ref)


   .. py:method:: get_uif(key_ref)


.. py:class:: ApplicationRelatedData

   OpenPGP related data.


   .. py:attribute:: aid
      :type:  OpenPgpAid


   .. py:attribute:: historical
      :type:  bytes


   .. py:attribute:: extended_length_info
      :type:  Optional[ExtendedLengthInfo]


   .. py:attribute:: general_feature_management
      :type:  Optional[GENERAL_FEATURE_MANAGEMENT]


   .. py:attribute:: discretionary
      :type:  DiscretionaryDataObjects


   .. py:method:: parse(encoded)
      :classmethod:



.. py:class:: SecuritySupportTemplate

   .. py:attribute:: signature_counter
      :type:  int


   .. py:method:: parse(encoded)
      :classmethod:



.. py:class:: Kdf

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: algorithm
      :type:  ClassVar[int]


   .. py:method:: process(pw, pin)
      :abstractmethod:


      Run the KDF on the input PIN.



   .. py:method:: parse(encoded)
      :classmethod:



   .. py:method:: __bytes__()
      :abstractmethod:



.. py:class:: KdfNone

   Bases: :py:obj:`Kdf`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: algorithm
      :value: 0



   .. py:method:: process(pw, pin)

      Run the KDF on the input PIN.



   .. py:method:: __bytes__()


.. py:class:: HASH_ALGORITHM

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: SHA256
      :value: 8



   .. py:attribute:: SHA512
      :value: 10



   .. py:method:: create_digest()


.. py:class:: KdfIterSaltedS2k

   Bases: :py:obj:`Kdf`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: algorithm
      :value: 3



   .. py:attribute:: hash_algorithm
      :type:  HASH_ALGORITHM


   .. py:attribute:: iteration_count
      :type:  int


   .. py:attribute:: salt_user
      :type:  bytes


   .. py:attribute:: salt_reset
      :type:  Optional[bytes]


   .. py:attribute:: salt_admin
      :type:  Optional[bytes]


   .. py:attribute:: initial_hash_user
      :type:  Optional[bytes]


   .. py:attribute:: initial_hash_admin
      :type:  Optional[bytes]


   .. py:method:: create(hash_algorithm = HASH_ALGORITHM.SHA256, iteration_count = 7864320)
      :classmethod:



   .. py:method:: get_salt(pw)


   .. py:method:: process(pw, pin)

      Run the KDF on the input PIN.



   .. py:method:: __bytes__()


.. py:class:: PrivateKeyTemplate

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: crt
      :type:  CRT


   .. py:method:: __bytes__()


.. py:class:: RsaKeyTemplate

   Bases: :py:obj:`PrivateKeyTemplate`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: e
      :type:  bytes


   .. py:attribute:: p
      :type:  bytes


   .. py:attribute:: q
      :type:  bytes


.. py:class:: RsaCrtKeyTemplate

   Bases: :py:obj:`RsaKeyTemplate`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: iqmp
      :type:  bytes


   .. py:attribute:: dmp1
      :type:  bytes


   .. py:attribute:: dmq1
      :type:  bytes


   .. py:attribute:: n
      :type:  bytes


.. py:class:: EcKeyTemplate

   Bases: :py:obj:`PrivateKeyTemplate`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: private_key
      :type:  bytes


   .. py:attribute:: public_key
      :type:  Optional[bytes]


.. py:class:: OpenPgpSession(connection, scp_key_params = None)

   A session with the OpenPGP application.


   .. py:attribute:: protocol


   .. py:property:: aid
      :type: OpenPgpAid


      Get the AID used to select the applet.



   .. py:property:: version
      :type: yubikit.core.Version


      Get the firmware version of the key.

      For YubiKey NEO this is the PGP applet version.



   .. py:property:: extended_capabilities
      :type: ExtendedCapabilities


      Get the Extended Capabilities from the YubiKey.



   .. py:method:: get_challenge(length)

      Get random data from the YubiKey.

      :param length: Length of the returned data.



   .. py:method:: get_data(do)

      Get a Data Object from the YubiKey.

      :param do: The Data Object to get.



   .. py:method:: put_data(do, data)

      Write a Data Object to the YubiKey.

      :param do: The Data Object to write to.
      :param data: The data to write.



   .. py:method:: get_pin_status()

      Get the current status of PINS.



   .. py:method:: get_signature_counter()

      Get the number of times the signature key has been used.



   .. py:method:: get_application_related_data()

      Read the Application Related Data.



   .. py:method:: set_signature_pin_policy(pin_policy)

      Set signature PIN policy.

      Requires Admin PIN verification.

      :param pin_policy: The PIN policy.



   .. py:method:: reset()

      Perform a factory reset on the OpenPGP application.

      WARNING: This will delete all stored keys, certificates and other data.



   .. py:method:: set_pin_attempts(user_attempts, reset_attempts, admin_attempts)

      Set the number of PIN attempts to allow before blocking.

      WARNING: On YubiKey NEO this will reset the PINs to their default values.

      Requires Admin PIN verification.

      :param user_attempts: The User PIN attempts.
      :param reset_attempts: The Reset Code attempts.
      :param admin_attempts: The Admin PIN attempts.



   .. py:method:: get_kdf()

      Get the Key Derivation Function data object.



   .. py:method:: set_kdf(kdf)

      Set up a PIN Key Derivation Function.

      This enables (or disables) the use of a KDF for PIN verification, as well
      as resetting the User and Admin PINs to their default (initial) values.

      If a Reset Code is present, it will be invalidated.

      This command requires Admin PIN verification.

      :param kdf: The key derivation function.



   .. py:method:: verify_pin(pin, extended = False)

      Verify the User PIN.

      This will unlock functionality that requires User PIN verification.
      Note that with `extended=False` (default) only sign operations are allowed.
      Inversely, with `extended=True` sign operations are NOT allowed.

      :param pin: The User PIN.
      :param extended: If `False` only sign operations are allowed,
          otherwise sign operations are NOT allowed.



   .. py:method:: verify_admin(admin_pin)

      Verify the Admin PIN.

      This will unlock functionality that requires Admin PIN verification.

      :param admin_pin: The Admin PIN.



   .. py:method:: unverify_pin(pw)

      Reset verification for PIN.

      :param pw: The User, Admin or Reset PIN



   .. py:method:: change_pin(pin, new_pin)

      Change the User PIN.

      :param pin: The current User PIN.
      :param new_pin: The new User PIN.



   .. py:method:: change_admin(admin_pin, new_admin_pin)

      Change the Admin PIN.

      :param admin_pin: The current Admin PIN.
      :param new_admin_pin: The new Admin PIN.



   .. py:method:: set_reset_code(reset_code)

      Set the Reset Code for User PIN.

      The Reset Code can be used to set a new User PIN if it is lost or becomes
      blocked, using the reset_pin method.

      This command requires Admin PIN verification.

      :param reset_code: The Reset Code for User PIN.



   .. py:method:: reset_pin(new_pin, reset_code = None)

      Reset the User PIN to a new value.

      This command requires Admin PIN verification, or the Reset Code.

      :param new_pin: The new user PIN.
      :param reset_code: The Reset Code.



   .. py:method:: get_algorithm_attributes(key_ref)

      Get the algorithm attributes for one of the key slots.

      :param key_ref: The key slot.



   .. py:method:: get_algorithm_information()

      Get the list of supported algorithm attributes for each key.

      The return value is a mapping of KEY_REF to a list of supported algorithm
      attributes, which can be set using set_algorithm_attributes.



   .. py:method:: set_algorithm_attributes(key_ref, attributes)

      Set the algorithm attributes for a key slot.

      WARNING: This will delete any key already stored in the slot if the attributes
      are changed!

      This command requires Admin PIN verification.

      :param key_ref: The key slot.
      :param attributes: The algorithm attributes to set.



   .. py:method:: get_uif(key_ref)

      Get the User Interaction Flag (touch requirement) for a key.

      :param key_ref: The key slot.



   .. py:method:: set_uif(key_ref, uif)

      Set the User Interaction Flag (touch requirement) for a key.

      Requires Admin PIN verification.

      :param key_ref: The key slot.
      :param uif: The User Interaction Flag.



   .. py:method:: get_key_information()

      Get the status of the keys.



   .. py:method:: get_generation_times()

      Get timestamps for when keys were generated.



   .. py:method:: set_generation_time(key_ref, timestamp)

      Set the generation timestamp for a key.

      Requires Admin PIN verification.

      :param key_ref: The key slot.
      :param timestamp: The timestamp.



   .. py:method:: get_fingerprints()

      Get key fingerprints.



   .. py:method:: set_fingerprint(key_ref, fingerprint)

      Set the fingerprint for a key.

      Requires Admin PIN verification.

      :param key_ref: The key slot.
      :param fingerprint: The fingerprint.



   .. py:method:: get_public_key(key_ref)

      Get the public key from a slot.

      :param key_ref: The key slot.



   .. py:method:: generate_rsa_key(key_ref, key_size)

      Generate an RSA key in the given slot.

      Requires Admin PIN verification.

      :param key_ref: The key slot.
      :param key_size: The size of the RSA key.



   .. py:method:: generate_ec_key(key_ref, curve_oid)

      Generate an EC key in the given slot.

      Requires Admin PIN verification.

      :param key_ref: The key slot.
      :param curve_oid: The curve OID.



   .. py:method:: put_key(key_ref, private_key)

      Import a private key into the given slot.

      Requires Admin PIN verification.

      :param key_ref: The key slot.
      :param private_key: The private key to import.



   .. py:method:: delete_key(key_ref)

      Delete the contents of a key slot.

      Requires Admin PIN verification.

      :param key_ref: The key slot.



   .. py:method:: get_certificate(key_ref)

      Get a certificate from a slot.

      :param key_ref: The slot.



   .. py:method:: put_certificate(key_ref, certificate)

      Import a certificate into a slot.

      Requires Admin PIN verification.

      :param key_ref: The slot.
      :param certificate: The X.509 certificate to import.



   .. py:method:: delete_certificate(key_ref)

      Delete a certificate in a slot.

      Requires Admin PIN verification.

      :param key_ref: The slot.



   .. py:method:: attest_key(key_ref)

      Create an attestation certificate for a key.

      The certificate is written to the certificate slot for the key, and its
      content is returned.

      Requires User PIN verification.

      :param key_ref: The key slot.



   .. py:method:: sign(message, hash_algorithm)

      Sign a message using the SIG key.

      Requires User PIN verification.

      :param message: The message to sign.
      :param hash_algorithm: The pre-signature hash algorithm.



   .. py:method:: decrypt(value)

      Decrypt a value using the DEC key.

      For RSA the `value` should be an encrypted block.
      For ECDH the `value` should be a peer public-key to perform the key exchange
      with, and the result will be the derived shared secret.

      Requires (extended) User PIN verification.

      :param value: The value to decrypt.



   .. py:method:: authenticate(message, hash_algorithm)

      Authenticate a message using the AUT key.

      Requires User PIN verification.

      :param message: The message to authenticate.
      :param hash_algorithm: The pre-authentication hash algorithm.



