yubikit.oath
============

.. py:module:: yubikit.oath


Attributes
----------

.. autoapisummary::

   yubikit.oath.TAG_NAME
   yubikit.oath.TAG_NAME_LIST
   yubikit.oath.TAG_KEY
   yubikit.oath.TAG_CHALLENGE
   yubikit.oath.TAG_RESPONSE
   yubikit.oath.TAG_TRUNCATED
   yubikit.oath.TAG_HOTP
   yubikit.oath.TAG_PROPERTY
   yubikit.oath.TAG_VERSION
   yubikit.oath.TAG_IMF
   yubikit.oath.TAG_TOUCH
   yubikit.oath.INS_LIST
   yubikit.oath.INS_PUT
   yubikit.oath.INS_DELETE
   yubikit.oath.INS_SET_CODE
   yubikit.oath.INS_RESET
   yubikit.oath.INS_RENAME
   yubikit.oath.INS_CALCULATE
   yubikit.oath.INS_VALIDATE
   yubikit.oath.INS_CALCULATE_ALL
   yubikit.oath.INS_SEND_REMAINING
   yubikit.oath.TOTP_ID_PATTERN
   yubikit.oath.MASK_ALGO
   yubikit.oath.MASK_TYPE
   yubikit.oath.DEFAULT_PERIOD
   yubikit.oath.DEFAULT_DIGITS
   yubikit.oath.DEFAULT_IMF
   yubikit.oath.CHALLENGE_LEN
   yubikit.oath.HMAC_MINIMUM_KEY_SIZE
   yubikit.oath.PROP_REQUIRE_TOUCH


Classes
-------

.. autoapisummary::

   yubikit.oath.HASH_ALGORITHM
   yubikit.oath.OATH_TYPE
   yubikit.oath.CredentialData
   yubikit.oath.Code
   yubikit.oath.Credential
   yubikit.oath.OathSession


Functions
---------

.. autoapisummary::

   yubikit.oath.parse_b32_key


Module Contents
---------------

.. py:data:: TAG_NAME
   :value: 113


.. py:data:: TAG_NAME_LIST
   :value: 114


.. py:data:: TAG_KEY
   :value: 115


.. py:data:: TAG_CHALLENGE
   :value: 116


.. py:data:: TAG_RESPONSE
   :value: 117


.. py:data:: TAG_TRUNCATED
   :value: 118


.. py:data:: TAG_HOTP
   :value: 119


.. py:data:: TAG_PROPERTY
   :value: 120


.. py:data:: TAG_VERSION
   :value: 121


.. py:data:: TAG_IMF
   :value: 122


.. py:data:: TAG_TOUCH
   :value: 124


.. py:data:: INS_LIST
   :value: 161


.. py:data:: INS_PUT
   :value: 1


.. py:data:: INS_DELETE
   :value: 2


.. py:data:: INS_SET_CODE
   :value: 3


.. py:data:: INS_RESET
   :value: 4


.. py:data:: INS_RENAME
   :value: 5


.. py:data:: INS_CALCULATE
   :value: 162


.. py:data:: INS_VALIDATE
   :value: 163


.. py:data:: INS_CALCULATE_ALL
   :value: 164


.. py:data:: INS_SEND_REMAINING
   :value: 165


.. py:data:: TOTP_ID_PATTERN

.. py:data:: MASK_ALGO
   :value: 15


.. py:data:: MASK_TYPE
   :value: 240


.. py:data:: DEFAULT_PERIOD
   :value: 30


.. py:data:: DEFAULT_DIGITS
   :value: 6


.. py:data:: DEFAULT_IMF
   :value: 0


.. py:data:: CHALLENGE_LEN
   :value: 8


.. py:data:: HMAC_MINIMUM_KEY_SIZE
   :value: 14


.. py:class:: HASH_ALGORITHM

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: SHA1
      :value: 1



   .. py:attribute:: SHA256
      :value: 2



   .. py:attribute:: SHA512
      :value: 3



.. py:class:: OATH_TYPE

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: HOTP
      :value: 16



   .. py:attribute:: TOTP
      :value: 32



.. py:data:: PROP_REQUIRE_TOUCH
   :value: 2


.. py:function:: parse_b32_key(key)

   Parse Base32 encoded key.

   :param key: The Base32 encoded key.


.. py:class:: CredentialData

   An object holding OATH credential data.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: oath_type
      :type:  OATH_TYPE


   .. py:attribute:: hash_algorithm
      :type:  HASH_ALGORITHM


   .. py:attribute:: secret
      :type:  bytes


   .. py:attribute:: digits
      :type:  int
      :value: 6



   .. py:attribute:: period
      :type:  int
      :value: 30



   .. py:attribute:: counter
      :type:  int
      :value: 0



   .. py:attribute:: issuer
      :type:  Optional[str]
      :value: None



   .. py:method:: parse_uri(uri)
      :classmethod:


      Parse OATH credential data from URI.

      :param uri: The URI to parse from.



   .. py:method:: get_id()


.. py:class:: Code

   An OATH code object.


   .. py:attribute:: value
      :type:  str


   .. py:attribute:: valid_from
      :type:  int


   .. py:attribute:: valid_to
      :type:  int


.. py:class:: Credential

   An OATH credential object.


   .. py:attribute:: device_id
      :type:  str


   .. py:attribute:: id
      :type:  bytes


   .. py:attribute:: issuer
      :type:  Optional[str]


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: oath_type
      :type:  OATH_TYPE


   .. py:attribute:: period
      :type:  int


   .. py:attribute:: touch_required
      :type:  Optional[bool]


   .. py:method:: __lt__(other)


   .. py:method:: __eq__(other)


   .. py:method:: __hash__()


.. py:class:: OathSession(connection, scp_key_params = None)

   A session with the OATH application.


   .. py:attribute:: protocol


   .. py:property:: version
      :type: yubikit.core.Version


      The version of the OATH application.



   .. py:property:: device_id
      :type: str


      The device ID.

      A random static identifier that is re-generated on reset.



   .. py:property:: has_key
      :type: bool


      If True, the YubiKey has an access key set.



   .. py:property:: locked
      :type: bool


      If True, the OATH application is currently locked via an access key.



   .. py:method:: reset()

      Perform a factory reset on the OATH application.



   .. py:method:: derive_key(password)

      Derive an access key from a password.

      :param password: The derivation password.



   .. py:method:: validate(key)

      Validate authentication with access key.

      This unlocks the session for use.

      :param key: The access key.



   .. py:method:: set_key(key)

      Set an access key for authentication.

      :param key: The access key.



   .. py:method:: unset_key()

      Remove the access key.

      This removes the need to authentication a session before using it.



   .. py:method:: put_credential(credential_data, touch_required = False)

      Add an OATH credential.

      :param credential_data: The credential data.
      :param touch_required: The touch policy.



   .. py:method:: rename_credential(credential_id, name, issuer = None)

      Rename a OATH credential.

      :param credential_id: The id of the credential.
      :param name: The new name of the credential.
      :param issuer: The credential issuer.



   .. py:method:: list_credentials()

      List OATH credentials.



   .. py:method:: calculate(credential_id, challenge)

      Perform a calculate for an OATH credential.

      :param credential_id: The id of the credential.
      :param challenge: The challenge.



   .. py:method:: delete_credential(credential_id)

      Delete an OATH credential.

      :param credential_id: The id of the credential.



   .. py:method:: calculate_all(timestamp = None)

      Calculate codes for all OATH credentials on the YubiKey.

      This excludes credentials which require touch as well as HOTP credentials.

      :param timestamp: A timestamp used for the TOTP challenge.



   .. py:method:: calculate_code(credential, timestamp = None)

      Calculate code for an OATH credential.

      :param credential: The credential object.
      :param timestamp: The timestamp.



