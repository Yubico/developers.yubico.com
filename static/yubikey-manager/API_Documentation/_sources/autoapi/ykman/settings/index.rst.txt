ykman.settings
==============

.. py:module:: ykman.settings


Attributes
----------

.. autoapisummary::

   ykman.settings.XDG_DATA_HOME
   ykman.settings.XDG_CONFIG_HOME
   ykman.settings.KEYRING_SERVICE
   ykman.settings.KEYRING_KEY
   ykman.settings.Configuration


Exceptions
----------

.. autoapisummary::

   ykman.settings.KeystoreError
   ykman.settings.UnwrapValueError


Classes
-------

.. autoapisummary::

   ykman.settings.Settings
   ykman.settings.AppData


Module Contents
---------------

.. py:data:: XDG_DATA_HOME

.. py:data:: XDG_CONFIG_HOME

.. py:data:: KEYRING_SERVICE

.. py:data:: KEYRING_KEY

.. py:class:: Settings(name)

   Bases: :py:obj:`dict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: fname


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __ne__(other)

      Return self!=value.



   .. py:method:: write()


   .. py:attribute:: __hash__
      :value: None



.. py:data:: Configuration

.. py:exception:: KeystoreError

   Bases: :py:obj:`Exception`


   Error accessing the OS keystore


.. py:exception:: UnwrapValueError

   Bases: :py:obj:`Exception`


   Error unwrapping a particular secret value


.. py:class:: AppData(name, keyring_service=KEYRING_SERVICE, keyring_key=KEYRING_KEY)

   Bases: :py:obj:`Settings`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:property:: keyring_unlocked
      :type: bool



   .. py:method:: ensure_unlocked()


   .. py:method:: get_secret(key)


   .. py:method:: put_secret(key, value)


