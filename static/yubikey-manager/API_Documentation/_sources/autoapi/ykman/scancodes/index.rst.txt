ykman.scancodes
===============

.. py:module:: ykman.scancodes


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/ykman/scancodes/bepo/index
   /autoapi/ykman/scancodes/de/index
   /autoapi/ykman/scancodes/fr/index
   /autoapi/ykman/scancodes/it/index
   /autoapi/ykman/scancodes/modhex/index
   /autoapi/ykman/scancodes/norman/index
   /autoapi/ykman/scancodes/uk/index
   /autoapi/ykman/scancodes/us/index


Classes
-------

.. autoapisummary::

   ykman.scancodes.KEYBOARD_LAYOUT


Functions
---------

.. autoapisummary::

   ykman.scancodes.encode


Package Contents
----------------

.. py:class:: KEYBOARD_LAYOUT(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: MODHEX


   .. py:attribute:: US


   .. py:attribute:: UK


   .. py:attribute:: DE


   .. py:attribute:: FR


   .. py:attribute:: IT


   .. py:attribute:: BEPO


   .. py:attribute:: NORMAN


.. py:function:: encode(data, keyboard_layout=KEYBOARD_LAYOUT.MODHEX)

